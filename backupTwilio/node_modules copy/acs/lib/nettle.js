'use strict';

/**
 * nettle - a command line for ACS custom node.js services Appcelerator
 * Proprietary - DO NOT REDISTRIBUTE Copyright (c) 2012 by Appcelerator, Inc.
 */
var fs = require('fs'),
    path = require('path'),
    program = require('commander'),
    u = require('./util.js'),
    logger = require('./logger'),
    colors = require('colors'),
    nettle_logger = require('./nettlelogger'),
    _ = require('underscore'),
    pkginfo = require('pkginfo')(module, 'name', 'version')
  ;

//init node_path
var Module = require('module').Module;
var acs_path = path.resolve(__dirname, '..', '..');
if(u.isWin()) {
    process.env.NODE_PATH = acs_path + ';' + process.env.NODE_PATH;
} else {
    process.env.NODE_PATH = acs_path + ':' + process.env.NODE_PATH;
}
Module._initPaths();

program.name = module.exports.name;

//set logger library
nettle_logger.toString = function() {
    return 'logger';
};
exports.logger = nettle_logger;

exports.toString = function() {
    return 'acs';
};

ccommander();
program.version(module.exports.version, '-v, --version')
    .description('ACS command line interface and app runner')
    .usage('[COMMAND] [COMMON OPTIONS] [COMMAND OPTIONS]')
    .option('-d, --dir <dir>', 'directory to load app from')
    .option('-n, --no-colors', 'turn off colors')
    .option('--no-banner', 'turn off banner')
    .option('--dates', 'turn on dates in logging');

program.removeAllListeners('version');
program.on('version', function() {
    var args = _.rest(program.rawArgs, 2);
    if (program.rawArgs.length > 5 || _.difference(args, ['-v', '--version', '-n', '--no-colors', '--no-banner']).length > 0) {
        console.log('-v, --version can not be used with options other than \'--no-colors\' and \'--no-banner\'.');
    } else {
        console.log(program._version);
    }
    process.exit(0);
});

program.command('new <name>')
    .description('\tcreate a new app')
    .option('--framework <framework>', 'create new app without using built-in MVC framework, available option is \'none\'.')
    .option('--force', 'force to use existing local app directory (add existing project to cloud)')
    .option('--org <orgid>', 'create app for the specified organization.')
    .option('--env <envid>', 'create app for the specified environment.')
    .action(function() {
        var cmd = restoreParams(this);
        this.force = cmd.force;
        this.framework = cmd.framework;
        this.org = cmd.org;
        this.env = cmd.env;
    });

program.command('add <name>')
    .description('\tadd a new end point to an existing app which is based on built-in MVC framework')
    .action(function() {
        restoreParams(this);
    });

program.command('cname [appname]')
    .description('\tset or remove cname of an existing app. If no appname provided it can run in app dir or with -d to specify an app dir.')
    .option('--set <cname>', 'set app CNAME (e.g. fish.appcelerator.org)')
    .option('--remove [cname]', 'remove app CNAME')
    .option('--org <orgid>', 'organization ID of the app if there are multiple apps with the same name in different organizations.')
    .option('--path <path>', 'the string that the request path begins of, this is used for URL based routing to different apps.')
    .option('--check [appname]', 'check the current cname setting.')
    .action(function() {
        // get current command. 'this' is actually 'program'
        var cmd = restoreParams(this);
        this.remove = cmd.remove;
        this.set = cmd.set;
        this.path = cmd.path;
        this.org = cmd.org;
        this.check = cmd.check;
    });

program.command('domain [appname]')
    .description('\tset or remove domain of an existing app. If no appname provided it can run in app dir or with -d to specify an app dir.')
    .option('--set <domain>', 'set app domain (e.g. fish.appcelerator.org)')
    .option('--remove [domain]', 'remove app domain')
    .option('--org <orgid>', 'organization ID of the app if there are multiple apps with the same name in different organizations.')
    .option('--path <path>', 'the string that the request path begins of, this is used for URL based routing to different apps.')
    .option('--check', 'check the current domain setting.')
    .action(function() {
        // get current command. 'this' is actually 'program'
        var cmd = restoreParams(this);
        this.remove = cmd.remove;
        this.set = cmd.set;
        this.path = cmd.path;
        this.org = cmd.org;
        this.check = cmd.check;
    });

//program.command('compile <outdir> [url]')
//.description('\tcompile the services into a Titanium project');

program.command('list [appname]')
    .description('\tshow the status of all apps or the app specified by appname')
    .option('--mine', 'show apps created by the developer only.')
    .option('--org <orgid>', 'show apps of specified organization only.')
    .option('--show_all', 'show all servers in the result if there are more than 10 servers, otherwise only servers whose status are not Deployed will be shown.')
    .action(function() {
        // get current command. 'this' is actually 'program'
        var cmd = restoreParams(this);
        this.id = cmd.id;
        this.mine = cmd.mine;
        this.org = cmd.org;
        this.show_all = cmd.show_all;
    });

program.command('logcat [appname]')
    .description('\ttail the log entries output from your app. If no appname provided it can run in app dir or with -d to specify an app dir. \'logcat -h\' for more options.')
    .option('--interval <interval>', 'set refresh inteval for logcat')
    .option('--build_log', 'get build log from an async publish')
    .option('--show_serverid [appname]', 'show server id in logs')
    .option('--server_id <server_id>', 'filter logs by server id')
    .option('--org <orgid>', 'organization ID of the app if there are multiple apps with the same name in different organizations.')
    .action(function() {
        // get current command. 'this' is actually 'program'
        var cmd = restoreParams(this);
        this.build_log = cmd.build_log;
        this.server_id = cmd.server_id;
        this.show_serverid = cmd.show_serverid;
        this.interval = cmd.interval;
        this.org = cmd.org;
    });

program.command('loglist [appname]')
    .description('\tlist the log entries during the specified start datetime and end datetime. If no appname provided it can run in app dir or with -d to specify an app dir. \'loglist -h\' for more options.')
    .option('--server_id <server_id>', 'filter logs by server id')
    .option('--build_log', 'get build log from an async publish')
    .option('--show_serverid [appname]', 'show server id in logs')
    .option('--start_date <start_date>', 'set start date for loglist')
    .option('--end_date <end_date>', 'set end date for loglist')
    .option('--per_page <per_page>', 'set item number in a single page, defaults to 100')
    .option('--more [appname]', 'get next page of log entries')
    .option('--org <orgid>', 'organization ID of the app if there are multiple apps with the same name in different organizations.')
    .action(function() {
        // get current command. 'this' is actually 'program'
        var cmd = restoreParams(this);
        this.server_id = cmd.server_id;
        this.show_serverid = cmd.show_serverid;
        this.build_log = cmd.build_log;
        this.start_date = cmd.start_date;
        this.end_date = cmd.end_date;
        this.more = cmd.more;
        this.per_page = cmd.per_page;
        this.org = cmd.org;
    });

program.command('accesslog [appname]')
    .description('\tlist the user access logs during the specified start datetime and end datetime. If no appname provided it can run in app dir or with -d to specify an app dir. \'accesslog -h\' for more options.')
    .option('--server_id <server_id>', 'filter access logs by server id')
    .option('--show_serverid [appname]', 'show server id in access logs')
    .option('--start_date <start_date>', 'set start date for accesslog')
    .option('--end_date <end_date>', 'set end date for accesslog')
    .option('--per_page <per_page>', 'set item number in a single page, defaults to 100')
    .option('--more [appname]', 'get next page of user access logs')
    .option('--full_content [appname]', 'show full access logs')
    .option('--org <orgid>', 'organization ID of the app if there are multiple apps with the same name in different organizations.')
    .action(function() {
        // get current command. 'this' is actually 'program'
        var cmd = restoreParams(this);
        this.server_id = cmd.server_id;
        this.show_serverid = cmd.show_serverid;
        this.start_date = cmd.start_date;
        this.end_date = cmd.end_date;
        this.more = cmd.more;
        this.per_page = cmd.per_page;
        this.full_content = cmd.full_content;
        this.org = cmd.org;
    });

program.command('usage [appname]')
    .description('\tlist the system resource usage logs during the specified start datetime and end datetime. If no appname provided it can run in app dir or with -d to specify an app dir. \'usage -h\' for more options.')
    .option('--server_id <server_id>', 'filter usage logs by server id')
    .option('--show_serverid [appname]', 'show server id in usage logs')
    .option('--start_date <start_date>', 'set start date for usagelog')
    .option('--end_date <end_date>', 'set end date for usagelog')
    .option('--per_page <per_page>', 'set item number in a single page, defaults to 100')
    .option('--more [appname]', 'get next page of usage logs')
    .option('--org <orgid>', 'organization ID of the app if there are multiple apps with the same name in different organizations.')
    .action(function() {
        // get current command. 'this' is actually 'program'
        var cmd = restoreParams(this);
        this.server_id = cmd.server_id;
        this.show_serverid = cmd.show_serverid;
        this.start_date = cmd.start_date;
        this.end_date = cmd.end_date;
        this.more = cmd.more;
        this.per_page = cmd.per_page;
        this.org = cmd.org;
    });

program.command('crt [appname]')
    .description('\tmanage the custom SSL certificates for accessing apps via https. SSL certificates are used for servers in cloud based on certificate names (SubjectAltName or CN). ' +
                'If no appname provided it can run in app dir or with -d to specify an app dir. \'crt -h\' for more options. This feature is available to enterprise user only.')
    .option('--add <cert>', 'add a certificate for the app. The certificate should be a pem file containing signed certificate, all intermediate certificates, and private key (pass phrase eliminated).')
    .option('--remove [appname]', 'remove the certificate for the app')
    .option('--org <orgid>', 'organization ID of the app if there are multiple apps with the same name in different organizations.')
    .action(function() {
        // get current command. 'this' is actually 'program'
        var cmd = restoreParams(this);
        this.add = cmd.add;
        this.remove = cmd.remove;
        this.org = cmd.org;
    });

program.command('login [username] [password]')
    .description('\tlogin to the ACS cloud')
    .option('--host <hostname>', 'ACS host name. If no protocol identifier included https will be used by default.')
    .action(function() {
        var cmd = restoreParams(this);
        this.host = cmd.host;
    });

program.command('logout')
    .description('\tlogout of the ACS cloud')
    .action(function() {
        restoreParams(this);
    });

program.command('publish [npm_username] [npm_password]')
    .description('\tpublish an app to the ACS cloud. run in app dir or with -d to specify an app dir.')
    .option('--force [appname]', 'force to republish an app')
    .option('--list_versions [appname]', 'show all versions published. Note that only one version can be deployed at a time.')
    .option('--set_active_version <version>', 'choose a version to deploy. The current deployed version will be un-deployed.')
    .option('--git <git_config>', 'publish an app stored on github. git_config should be a json file or string of key value pairs.')
    .option('--org <orgid>', 'organization ID of the app if there are multiple apps with the same name in different organizations. This is for enterprise user only.')
    .option('--async', 'publish an app without waiting for fully deployed onto cloud.')
    .option('--delete_oldest', 'delete the oldest version if published versions reached max number of versions')
    .option('--inplace', 'upgrade servers of this app in-place. By default new servers will be launched to replace old ones.')
    .action(function() {
        var cmd = restoreParams(this);
        this.force = cmd.force;
        this.org = cmd.org;
        this.async = cmd.async;
        this.delete_oldest = cmd.delete_oldest;
        this.list_versions = cmd.list_versions;
        this.set_active_version = cmd.set_active_version;
		this.git = cmd.git;
        this.inplace = cmd.inplace;
    });

program.command('run')
    .description('\trun a local version of the cloud for development and test. run in app dir or with -d to specify an app dir.')
    .option('-p, --port <port>', 'port to listen on')
    .option('--random', 'use a random port')
    .action(function() {
        var cmd = restoreParams(this);
        this.server = cmd.server;
        this.port = cmd.port;
        this.random = cmd.random;
    });

program.command('unpublish [appname]')
    .description('\tun-publish an app from the ACS cloud. If no appname provided it can run in app dir or with -d to specify an app dir.')
    .option('--ver <version>', 'the version to be unpublished. If not specified the current deployed version will be unpublished.')
    .option('--org <orgid>', 'organization ID of the app if there are multiple apps with the same name in different organizations.')
    .action(function() {
        var cmd = restoreParams(this);
        this.ver = cmd.ver;
        this.org = cmd.org;
    });

program.command('remove [appname]')
    .description('\tremove an app from both ACS cloud side and local side. If no appname provided it can run ' +
        'in app dir or with -d to specify an app dir. To remove local dir at the same time -d should be used. ' +
        'In addition, --force must be used to indicate to remove local dir.')
    .option('--force', 'force to remove local app directory. must use with -d')
    .option('--org <orgid>', 'organization ID of the app if there are multiple apps with the same name in different organizations.')
    .action(function() {
        var cmd = restoreParams(this);
        this.force = cmd.force;
        this.org = cmd.org;
    });

program.command('config [appname]')
    .description('\tconfig how many app servers in cloud to use')
    .option('--org <orgid>', 'organization ID of the app if there are multiple apps with the same name in different organizations.')
    .option('--autoscaleup <true|false>', 'turn on/off auto scale-up')
    .option('--autoscaledown <true|false>', 'turn on/off auto scale-down')
    .option('--maxqueuedrequests <var>', 'set the max queued requests per server for auto scale-up to happen')
    .option('--minsize <n>', 'set the min number of servers')
    .option('--maxsize <n>', 'set the max number of servers')
    .option('--set <var>', 'set config variables for app. The variables will be available as env vars to app.')
    .option('--unset <var>', 'unset config variables for app.')
    .option('--env [appname]', 'show env variables for app.')
    .option('--inplace', 'upgrade servers of this app in-place for environment variable change (--set|--unset). By default new servers will be launched to replace old ones.')
    .option('--usagenotice <true|false>', 'turn on/off app resource usage notice')
    .option('--nodowntime <true|false>', 'turn on/off app zero-downtime upgrading')
    .option('--inc <var>', 'increase the number of servers by <var>')
    .option('--dec <var>', 'decrease the number of servers by <var>')
    .action(function() {
        var cmd = restoreParams(this);
        this.maxsize = cmd.maxsize;
        this.minsize = cmd.minsize;
        this.autoscaleup = cmd.autoscaleup;
        this.autoscaledown = cmd.autoscaledown;
        this.maxqueuedrequests = cmd.maxqueuedrequests;
        this.org = cmd.org;
        this.set = cmd.set;
        this.unset = cmd.unset;
        this.env = cmd.env;
        this.usagenotice = cmd.usagenotice;
        this.nodowntime = cmd.nodowntime;
        this.inplace = cmd.inplace;
    });

program.command('whoami')
    .description('\tdisplay current login user')
    .option('--output <value>', 'output format  [report, json]')
    .action(function() {
        var cmd = restoreParams(this);
        this.output = cmd.output;
    });

program.command('server [appname]')
    .description('\tset the server size for an app. If no appname provided it can run in app dir or with -d to specify an app dir. \'server -h\' for more options.')
    .option('--set <size>', 'set the server size for an app.')
    .option('--restart <serverid>', 'restart a server for an app.')
    .option('--org <orgid>','organization ID of the app if there are multiple apps with the same name in different organizations.')
    .option('--list', 'list how many servers an org has and how many free ones are available.')
    .action(function() {
        var cmd = restoreParams(this);
        this.set = cmd.set;
        this.restart = cmd.restart;
        this.org = cmd.org;
        this.list = cmd.list;
    });

program.command('download [appname]')
    .description('\tdownload the app source file with specified app name and version. If no appname provided it can run in app dir or with -d to specify an app dir, and the currently deployed app version will be downloaded if no app version option provided.  \'download -h\' for more options.')
    .option('--ver <version>', 'app version. If not specified the version deployed currently will be downloaded.')
    .option('--path <local_path>', 'an existing local path to store app source file')
    .option('--org <orgid>', 'organization ID of the app if there are multiple apps with the same name in different organizations.')
    .action(function() {
        // get current command. 'this' is actually 'program'
        var cmd = restoreParams(this);
        this.ver = cmd.ver;
        this.path = cmd.path;
        this.org = cmd.org;
    });
program.command('restart [appname]')
    .description('\trestart an app from the Arrowcloud. If no appname provided it can run in app dir or with -d to specify an app dir.')
    .option('--org <orgid>', 'organization ID of the app if there are multiple apps with the same name in different organizations.')
    .action(function() {
        var cmd = restoreParams(this);
        this.org = cmd.org;
    });

program.command('transfer-domain <domain_name>')
    .description('\ttransfer a domain name from an app to another. \'transfer-domain -h\' for more options.')
    .option('--from <source app>', 'app that owns the domain name currently')
    .option('--to <target app>', 'app to receive the domain name')
    .option('--org <orgid>', 'organization ID of the app if there are multiple apps with the same name in different organizations.')
    .action(function() {
        // get current command. 'this' is actually 'program'
        var cmd = restoreParams(this);
        this.from = cmd.from;
        this.to = cmd.to;
        this.org = cmd.org;
    });


program.parse(process.argv);

//setup colors
logger.colors(program.colors);
logger.dates(program.dates);
if (!program.colors) {
    colors.mode = 'none';
}

process.on('uncaughtException', function(err) {
    if (err && err.code === 'EADDRINUSE') {
        u.die('Assigned port is already in use. Please see if you have a running instance of this service on this machine.');
    }
    logger.error(err.stack? err.stack: err);
});

var killSignals = [ 'SIGINT', 'SIGTERM' ];
for ( var i = 0; i < killSignals.length; i++) {
    process.on(killSignals[i], function() {
        process.exit();
    });
}

function banner() {
    var b = '      _/_/      _/_/_/    _/_/_/ \n'.blue +
            '   _/    _/  _/        _/        \n'.blue +
            '  _/_/_/_/  _/          _/_/     \n'.blue +
            ' _/    _/  _/              _/    \n'.blue +
            '_/    _/    _/_/_/  _/_/_/       \n'.blue;

    if (!program.colors) {
        b = colors.stripColors(b);
    }
    return b;
}

function copyright() {
    var c = 'ACS: Appcelerator Cloud Services Command-Line Interface'.cyan.bold + ', version ' + module.exports.version + '\n' +
          'Copyright (c) 2012-' + new Date().getFullYear() +
          ', Appcelerator, Inc.  All Rights Reserved.\n';

    if (!program.colors) {
        c = colors.stripColors(c);
    }
    return c;
}

function help() {
    console.log(program.helpInformation());
    process.exit(1);
}

function main(args) {
    if (args.length === 0) {
        help();
    }

    var cmd = args[0];
    switch (cmd) {
        case 'logout':
        case 'login':
        case 'new':
        case 'add':
        case 'remove':
        case 'compile':
        case 'publish':
        case 'su':
        case 'config':
        case 'list':
        case 'crt':
        case 'unpublish':
        case 'whoami':
	case 'restart':
        case 'logcat':
        case 'loglist':
        case 'accesslog':
        case 'usage':
        case 'download':
        case 'cname':
        case 'server':
        case 'domain':
        case 'transfer-domain':
            if(program.banner) {
                console.log(copyright());
            }
            var noLoginCommand = _.contains(['logout', 'login', 'add', 'compile'], cmd);
            var globalConfig = u.getGlobalConfig();
            // login firstly if the cookie is not existing in local
            if (!noLoginCommand && (!globalConfig || !globalConfig.cookie)) {
                u.requireLogin(function() {
                    // destroy stand input after login, except for 'publish', 'config', 'crt', 'new', 'cname', 'domain' and 'server'
                    // because those commands may need further user input
                    if( !_.contains(['publish', 'config', 'crt', 'new', 'cname', 'domain', 'server'], cmd) ){
                        process.stdin.destroy();
                    }
                    // continue previous command after user login successfully
                    program.isCallback = true;
                    require('./command/' + cmd).run(args.splice(1), program);
                });
            } else {
                require('./command/' + cmd).run(args.splice(1), program);
            }
            break;
        case 'run':
            if(program.banner){
                console.log(copyright());
            }

            var port = program.port || 8080;
            var config = {};

            if (!program.dir) {
                var dir = path.resolve(process.cwd());
                if (u.exists(path.join(dir, 'package.json'))) {
                    program.dir = dir;
                }
            }

            if (program.dir) {
                var cfg = path.join(program.dir, 'package.json');
                var result = u.readAndValidateConfig(cfg); 
                if(!result.success){
                    u.die(result.message);
                } 
                config = result.config;       
            }

            if (program.random) {
                port = 25000 + Math.round(Math.random() * 1000, 0);
            }

            if(u.isWin()) {
                process.env.NODE_PATH = program.dir + '/node_modules' + ';' +
                    process.env.NODE_PATH;
            } else {
                process.env.NODE_PATH = program.dir + '/node_modules' + ':' +
                    process.env.NODE_PATH;
            }
            Module._initPaths();

            require('./command/run').run(port, program.dir, config);
            break;
        default:
            u.die('Unknown command: ' + cmd.cyan);
    }
}

main(program.args);

//customize commander a little bit
function ccommander() {

    /**
     * Return command help documentation.
     *
     * @return {String}
     * @api private
     */

    program.Command.prototype.commandHelp = function() {
        if (!this.commands.length) {
            return '';
        }

        var cmdInfos = this.commands.map(function(cmd) {
            var args = cmd.args.map(function(arg) {
                return arg.required ? '<' + arg.name +
                        '>' : '[' + arg.name + ']';
            }).join(' ');

            return cmd.name.blue +
                (cmd.options.length ? ' [options]'.white
                : '') +
                ' ' +
                args.white +
                (cmd.description() ? '\n' +
                cmd.description().grey : '');
        });

        var cmdHelp = '';
        cmdInfos.forEach(function(element,index,array){
            if(element) {
                cmdHelp += element;
                if(index < array.length -1) {
                    cmdHelp += '\n\n';
                }
            }
        });

        if(!program.colors) {
            cmdHelp = colors.stripColors(cmdHelp);
        }

        return [
            '',
            '  Commands:',
            '',
            cmdHelp.replace(/^/gm, '    '), ''
        ].join('\n');
    };

    /**
     * Return help for options.
     *
     * @return {String}
     * @api private
     */

    program.Command.prototype.optionHelp = function() {
        var width = this.largestOptionLength();
        var cmdName = this.name;
        // Prepend the help information
        var result = [ pad('-h, --help', width).white + '  ' +
          'output usage information'.grey ].concat(
        this.options.map(function(option) {
            if (hide(cmdName, option)) {
                return '';
            }
            return pad(option.flags, width).white + '  ' +
                option.description.grey;
        })).join('\n');
        if(!program.colors) {
            result = colors.stripColors(result);
        }
        return result;
    };


    function hide(cmdName, option) {
        switch(cmdName) {
        case 'list':
            if(option.flags.indexOf('--id') !== -1) {
                return true;
            }
            break;
        case 'config':
            if(option.flags.indexOf('--inc') !== -1 || option.flags.indexOf('--dec') !== -1) {
                return true;
            }
            break;
        case 'cname':
            if(option.flags.indexOf('--path') !== -1 || option.flags.indexOf('--check') !== -1) {
                return true;
            }
            break;
        case 'server':
            if(option.flags.indexOf('--list') !== -1) {
                return true;
            }
            break;
        }
        return false;
    }

    /**
     * Return program help documentation.
     *
     * @return {String}
     * @api private
     */

    program.Command.prototype.helpInformation = function() {

        var helpInfo = ['', '  Function: ' + this.description() + '\n',
            '  Usage: ' + this.name + ' ' + this.usage(),
            '' + this.commandHelp(), '  Options:', '',
            '' + this.optionHelp().replace(/^/gm, '    '), '', '' ];

        if(this.name === program.name && program.banner) {
            helpInfo.unshift('', banner(), copyright());
        }
        return helpInfo.join('\n');
    };

    /**
     * Pad `str` to `width`.
     *
     * @param {String}
     *            str
     * @param {Number}
     *            width
     * @return {String}
     * @api private
     */

    function pad(str, width) {
        var len = Math.max(0, width - str.length);
        return str + new Array(len + 1).join(' ');
    }
}

function restoreParams(program) {
    // pop up elements added by commander action logic
    var cmd = program.args.pop();
    for ( var i = program.args.length - 1; i >= 0; i--) {
        if (!program.args[i]) {
            program.args.pop();
        }
    }
    // restore the current command name because main() expects it.
    program.args.unshift(program.rawArgs[2]);
    return cmd;
}

'use strict';

var util = require('../util.js'),
    logger = require('../logger.js'),
    fs = require('fs'),
    program = require('commander'),
    moment = require('moment'),
    path = require('path'),
    uuid = require('node-uuid'),
    request = require('request'),
    HandleResult = require('./handleResult'),
    _ = require('underscore')._;

exports.run = function(args, opts) {
    var p,
        url,
        globalConfig = util.getGlobalConfig(),
        defaultConfig = util.getDefaultConfig(),
        proxy = util.getProxy();

    if (proxy) {
        logger.debug('ACS CLI is using proxy: ' + proxy.server);
        proxy = proxy.url;
    }
    if (globalConfig.publishHost && !opts.isCallback) {
        console.log(String(('Admin Hostname: ' + globalConfig.publishHost).grey));
    }

    // the command line argument will be treated as app name
    var appname = null;
    if (args.length > 0) {
        appname = args[0];
    }

    var cookie = globalConfig.cookie ? String(globalConfig.cookie).split(';')[0] || ['connect-sid', ''].join('=') : '';

    p = '/list';

    if (appname) {
        p += '/' + appname;
    }

    var queryAdded = false;
    if (opts.mine) {
        p += '?owner=developer';
        queryAdded = true;
    }

    if (opts.org) {
        if (queryAdded) {
            p += '&orgid=';
        } else {
            p += '?orgid=';
        }
        p += opts.org;
    }

    url = (globalConfig.publishHost || defaultConfig.publishHost) + ':' + (globalConfig.publishPort || defaultConfig.publishPort) + p;

    var HR = new HandleResult();
    HR.reqParams = ['list', args, opts];
    HR.errorMessage = 'List failed';
    HR.succeed = function(response, result) {
        showList(result, opts);
    };

    request({
        uri: encodeURI(url),
        method: 'GET',
        proxy: proxy,
        headers: {
            'Cookie': cookie,
            'Content-Type': 'application/x-www-form-urlencoded'
        }
    }, HR.handler);

};

function showList(result, opts) {
    var apps = result.apps;
    var quotas = result.quotas || [];
    if (apps.length === 0) {
        console.log('No app found.');
        return;
    }
    var lastOrgid = null;
    for (var i = 0; i < apps.length; i++) {
        console.log();
        var app = apps[i];
        if (!app) {
            continue;
        }
        if (app.orgid !== lastOrgid) {
            lastOrgid = app.orgid;
            console.log('Organization: ' + app.orgName + ' (' + app.orgid + ')');
            console.log('============ ');
            quotas.forEach(function(quota) {
                if (quota.orgid === app.orgid) {
                    console.log(String('Points:'.cyan));
                    var totalPoints = quota.points.quota === -1 ? 'unlimited' : quota.points.quota;
                    console.log(' -- Quota: '.cyan + totalPoints);
                    console.log(' -- Used: '.cyan + quota.points.used);
                    console.log();
                }
            });
        }
        console.log('App name: '.cyan + app.name);
        if (app.userName) {
            console.log(' -- Created by: '.cyan + app.userName);
        }
        if (app.url) {
            console.log(' -- URL: '.cyan + app.url);
        }
        if (app.cname) {
            console.log(' -- DOMAIN: '.cyan + app.cname);
        }
        if (app.created_at) {
            console.log(' -- Created at: '.cyan + new Date(app.created_at));
        }
        if (app.published_at) {
            console.log(' -- Published at: '.cyan + moment(app.published_at).format());
        }
        if (app.gitconf) {
            if (app.gitconf.repo) {
                console.log(' -- Git Repo: '.cyan + app.gitconf.repo);
                if (app.gitconf.branch) {
                    console.log(' -- Git Branch: '.cyan + app.gitconf.branch);
                }
            }
        }
        if (app.max_size) {
            console.log(' -- Maximum allowed number of servers: '.cyan + app.max_size);
        }
        if (app.min_size) {
            console.log(' -- Minimum number of servers: '.cyan + app.min_size);
        }
        if (app.cur_size) {
            console.log(' -- Number of desired servers: '.cyan + app.cur_size);
        }
        if (app.scaleUpEnabled !== undefined) {
            console.log(' -- Auto scale-up enabled: '.cyan + app.scaleUpEnabled);
        }
        if (app.maxQueuedRequestsPerServer && app.scaleUpEnabled) {
            console.log(' -- Maximum queued requests per server: '.cyan + app.maxQueuedRequestsPerServer);
        }
        if (app.scaleDownEnabled !== undefined) {
            console.log(' -- Auto scale-down enabled: '.cyan + app.scaleDownEnabled);
        }
        if (app.nodowntime === false) {
            console.log(' -- Zero-downtime upgrading: '.cyan + 'false');
        } else {
            console.log(' -- Zero-downtime upgrading: '.cyan + 'true');
        }
        if (!app.activeDeployment && !app.pendingDeployment) {
            console.log(' -- Status: '.cyan + app.status);
        }
        if (app.unpublished_at) {
            console.log(' -- Unpublished at: '.cyan + new Date(app.unpublished_at));
        }
        if (app.deactivated_at) {
            console.log(' -- Deactivated at: '.cyan + new Date(app.deactivated_at));
        }
        console.log();

        if(app.activeDeployment) {
            console.log(' -- Active deployment: '.cyan);
            if (app.NodeVersion) {
                console.log('    - Node version: '.cyan + app.NodeVersion);
            }
            if (app.server_size) {
                console.log('    - Server size: '.cyan + app.server_size);
            }
            if (app.version) {
                console.log('    - App version: '.cyan + app.version);
            }
            if (app.deployed_at) {
                console.log('    - Deployed at: '.cyan + new Date(app.deployed_at));
            }
            if(app.status) {
                console.log('    - Status: '.cyan + app.status);
            }
            if (app.server_errors) {
                console.log('    - Server errors: '.cyan + formatError(app.server_errors));
                if (app.pendingBuild || app.pendingDeployment) {
                    console.log('      A new deployment is in progress, and server errors are from last failed deployment'.magenta);
                }
            }
            if (app.numServersDeployed) {
                console.log('    - Number of deployed servers: '.cyan + app.numServersDeployed);
            }
            var normalSvrCnt = 0, svrCnt = 0;
            if (app.servers && app.servers.length > 0) {
                console.log(String('    - Servers: '.cyan));
                if (app.pendingDeployment) {
                    console.log('      Warning: servers are running the last successful build.'.magenta);
                }
                app.servers.forEach(function (server, index, array) {
                    if (server.status === 'Running') {
                        normalSvrCnt++;
                        if (opts.show_all || normalSvrCnt <= 10) {
                             if (server.restarted_at) { 
                                 console.log('       No. '.cyan + (++svrCnt) + '\tID: '.cyan + server.id + '\tStatus: '.cyan + server.status + '\t  Launched at: '.cyan + moment(server.launched_at).format('llll') + '\t  Restarted at: '.cyan + moment(server.restarted_at).format('llll'));
                             } else {
                                 console.log('       No. '.cyan + (++svrCnt) + '\tID: '.cyan + server.id + '\tStatus: '.cyan + server.status + '\t  Launched at: '.cyan + moment(server.launched_at).format('llll'));
                             }
                        }
                    } else {
                        if (server.restarted_at) {
                             console.log('       No. '.cyan + (++svrCnt) + '\tID: '.cyan + server.id + '\tStatus: '.cyan + server.status + '\t  Launched at: '.cyan + moment(server.launched_at).format('llll') + '\t  Restarted at: '.cyan + moment(server.restarted_at).format('llll'));
                        } else {
                             console.log('       No. '.cyan + (++svrCnt) + '\tID: '.cyan + server.id + '\tStatus: '.cyan + server.status + '\t  Launched at: '.cyan + moment(server.launched_at).format('llll'));
                        }
                        if (server.message) {
                            console.log('     - Message: '.cyan + server.message);
                        }
                    }
                });
                if (!opts.show_all && normalSvrCnt > 10) {
                    console.log('      Note: use --show_all to show all servers.'.magenta);
                }
            }
            console.log();
            normalSvrCnt = 0; svrCnt = 0;
            if (app.pendingScaleDnServers && app.pendingScaleDnServers.length > 0) {
                console.log(String('    - Servers to be shutdown: '.cyan));
                app.pendingScaleDnServers.forEach(function (server, index, array) {
                    if (server.status === 'Running') {
                        normalSvrCnt++;
                        if (opts.show_all || normalSvrCnt <= 10) {
                            console.log('       No. '.cyan + (++svrCnt) + '\tID: '.cyan + server.id + '\tStatus: '.cyan + server.status);
                        }
                    } else {
                        console.log('       No. '.cyan + (++svrCnt) + '\tID: '.cyan + server.id + '\tStatus: '.cyan + server.status);
                        if (server.message) {
                            console.log('     - Message: '.cyan + server.message);
                        }
                    }
                });
                if (!opts.show_all && normalSvrCnt > 10) {
                    console.log('      Note: use --show_all to show all servers.'.magenta);
                }
                console.log();
            }
        }

        if (app.pendingDeployment) {
            console.log(' -- Pending deployment:'.cyan);
            if (app.pendingDeployment.NodeVersion) {
                console.log('    - Node version: '.cyan + app.pendingDeployment.NodeVersion);
            }
            if (app.pendingDeployment.server_size) {
                console.log('    - Server size: '.cyan + app.pendingDeployment.server_size);
            }
            if (app.pendingDeployment.version) {
                console.log('    - App version: '.cyan + app.pendingDeployment.version);
            }
            if (app.pendingDeployment.deploy_started_at) {
                console.log('    - Deploy started at: '.cyan + new Date(app.pendingDeployment.deploy_started_at));
            }
            if(app.pendingDeployment.status) {
                console.log('    - Status: '.cyan + app.pendingDeployment.status);
            }
            if (app.pendingDeployment.server_errors) {
                console.log('    - Server errors: '.cyan + formatError(app.pendingDeployment.server_errors));
            }
            if (app.pendingDeployment.numServersDeployed) {
                console.log('    - Number of deployed servers: '.cyan + app.pendingDeployment.numServersDeployed);
            }
            if (app.pendingDeployment.servers && app.pendingDeployment.servers.length > 0) {
                console.log(String('    - servers: '.cyan));
                normalSvrCnt = 0;
                svrCnt = 0;
                app.pendingDeployment.servers.forEach(function(server, index, array) {
                    if (server.status === 'Running') {
                        normalSvrCnt++;
                        if (opts.show_all || normalSvrCnt <= 10) {
                            console.log('       No. '.cyan + (++svrCnt) + '\tID: '.cyan + server.id + '\tStatus: '.cyan + server.status);
                        }
                    } else {
                        console.log('       No. '.cyan + (++svrCnt) + '\tID: '.cyan + server.id + '\tStatus: '.cyan + server.status);
                        if (server.message) {
                            console.log('     - Message: '.cyan + server.message);
                        }
                    }
                });
                if (!opts.show_all && normalSvrCnt > 10) {
                    console.log('      Note: use --show_all to show all servers.'.magenta);
                }
            }
            console.log();
        }

        if(app.pendingBuild) {
            console.log(' -- Pending build:'.cyan);
            if (app.pendingBuild.NodeVersion) {
                console.log('    - Node version: '.cyan + app.pendingBuild.NodeVersion);
            }
            if (app.pendingBuild.version) {
                console.log('    - App version: '.cyan + app.pendingBuild.version);
            }
            if (app.build_start_time) {
                console.log('    - Build started at: '.cyan + new Date(app.build_start_time));
            }
            console.log('    > Build status: '.cyan + app.build_status);
            if (app.build_errors) {
                console.log('    - Build errors: '.cyan + app.build_errors.red);
            }
            console.log();
        }
    }

    if(result.pendingDeployments) {
        console.log('Total memory needed for pending deployments: %sM', result.pendingDeployments.totalMemoryNeeded);
        delete result.pendingDeployments.totalMemoryNeeded;
        var serverSizes = Object.keys(result.pendingDeployments);
        serverSizes.forEach(function(serverSize) {
            var stats = result.pendingDeployments[serverSize];
            if(typeof stats === 'object') {
                console.log(' -- Server: %s(%sM RAM), number needed: %s, memory needed sub-total: %sM.', serverSize,
                    stats.serverRAM, stats.numServerNeeded, stats.memoryNeeded);
            } else {
                console.log(' -- Server: %s(dedicated), number needed: %s.', serverSize, stats);
            }
        });
        console.log();
    }

    if(result.baseContainerStats) {
        var ips = Object.keys(result.baseContainerStats);
        console.log('Base containers: %s', ips.length);
        ips.forEach(function(ip) {
            var stats = result.baseContainerStats[ip];
            if(stats.instanceType) {
                console.log(' -- %s(%s): Total RAM %sM, Free RAM %sM', ip, stats.instanceType, stats.memory.total, stats.memory.free);
            } else {
                console.log(' -- %s: Total RAM %sM, Free RAM %sM', ip, stats.memory.total, stats.memory.free);
            }
        });
        console.log();
    }
}

function formatError(error) {
    var serverIPId, errMsg = '', firstLine = true;
    for (serverIPId in error) {
        if (error.hasOwnProperty(serverIPId)) {
            if(firstLine) {
                firstLine = false;
                errMsg += (serverIPId.split(':')[1] + ': ' + error[serverIPId]);
            } else {
                errMsg += ('\n                     ' + serverIPId.split(':')[1] + ': ' + error[serverIPId]);
            }
        }
    }
    return errMsg === 'null' ? "" : errMsg;
}




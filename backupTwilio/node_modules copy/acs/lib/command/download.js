'use strict';

var util = require('../util.js'),
    logger = require('../logger.js'),
    fs = require('fs'),
    program = require('commander'),
    path = require('path'),
    request = require('request'),
    cli = require('../cli');

exports.run = function(args, opts) {
    var p,
        url,
        globalConfig = util.getGlobalConfig(),
        defaultConfig = util.getDefaultConfig(),
        proxy = util.getProxy();

    if(proxy) {
        logger.debug('ACS CLI is using proxy: ' + proxy.server);
        proxy = proxy.url;
    }
    if(globalConfig.publishHost && !opts.isCallback) {
        console.log(String(('Admin Hostname: ' + globalConfig.publishHost).grey));
    }

    // the command line argument will be treated as app name
	var appname = util.getAppName(args, opts);
    var version = opts.ver;

    if (version === undefined) {
        version = "deployed";
    }
    // the local path to store app source file
    var local_path = opts.path;
    if(local_path === undefined || local_path === null || local_path.trim().length === 0) {
        local_path = './';
    } else {
        if(!fs.existsSync(local_path)) {
            util.die('Path ' + local_path + ' not found. Please specify a valid path.');
        }
        local_path += '/';
    }

    var cookie = globalConfig.cookie ? String(globalConfig.cookie).split(';')[0] || [ 'connect-sid', '' ].join('=') : '';

    p = '/download/' + appname + '/' + version;

    url = (globalConfig.publishHost || defaultConfig.publishHost) + ':' + (globalConfig.publishPort || defaultConfig.publishPort) + p;

    if(opts.org) {
        url += ('?orgid=' + opts.org);
    }

    download(url, cookie, proxy, function(result) {

        //Get the app source file and write it into local disk
        downloadFromS3(appname, result.version, local_path, result.url);
    });


    function download(url, cookie, proxy, callback) {

        var isJson = false, jsonRes = '', savedFile;

        // Send request to stratus to get the pre-signed url of app source file which is stored in AWS S3.
        var req = request({
            uri: encodeURI(url),
            method: 'GET',
            proxy: proxy,
            headers: {
                'Cookie': cookie,
                'Content-Type': 'application/x-www-form-urlencoded'
            }
        });

        req.on("response", function(response){
            if (response.statusCode === 503) {
                util.die("Admin server is currently unavailable.");
            }
            if (response.statusCode === 502) {
                callback('Admin server ran into a problem when processing the request.');
            }

            if(response.headers['content-type'] && response.headers['content-type'].indexOf('json') !== -1) {
                isJson = true;
            } else {
                savedFile =  path.join(local_path, appname + '_' + response.headers.app_version + '.tar.gz');
                var stream = fs.createWriteStream(savedFile);
                response.pipe(stream);
            }
        });

        req.on('data', function(chunk) {
            process.stdout.write('.');
            if(isJson) {
                jsonRes += chunk;
            }
        });

        req.on('error', function(err) {
            util.die(util.getConnectionErrorMsg(err));
        });

        req.on('end', function() {
            if(isJson) {
                var result = null;
                try {
                    result = JSON.parse(jsonRes);
                } catch(E) {
                    console.log();
                    util.die('Error response: ' + jsonRes);
                }
                if( result.errcode && result.errcode === 100 ) {
                    util.requireLogin(function() {
                        process.stdin.destroy();
                        opts.isCallback = true;
                        require('./download').run(args, opts);
                    });
                } else {
                    if (!result.success) {
                        console.log();
                        util.die(result.message, result.errcode ? result.errcode : 1);
                    }

                    callback(result);
                }
            } else {
                console.log();
                console.log('The app has been saved to ' + savedFile + ' successfully!');
            }
        });

    }
};


/**
 * Send request to AWS server to download the app source file,
 * and write the data stream into local disk,
 * the downloaded app source file is named <appname>_<version>.tar.gz.
 *
 * @param appname the app name
 * @param version the app's version number
 * @param dir the local directory to store the app source file
 * @param url the pre-signed url, which is generated from AWS server and points to AWS S3
 */
function downloadFromS3(appname, version, dir, url){
    var bytesRead = 0;
    var content_length = 0;
    var content_type = null;

    var savedFile =  path.join(dir, appname + '_' + version + '.tar.gz');

    var file = fs.createWriteStream(savedFile);

    var req = request.get({
        url: url,
        method: 'GET'
    });

    //Send request to AWS server to download the app source file.
    req.on("request", function(res){
        console.log('App name: '.cyan + appname + ' Version: '.cyan + version);
        console.log(" -- Request sent, awaiting response...".cyan);
    });

    //Process the response of AWS server
    req.on("response", function(res){
        if(res.statusCode !== 200){
            util.die("Server returned error status. "	+ res.statusCode);
        } else {
            content_length = res.headers["content-length"];
            content_type =  res.headers["content-type"];
            console.log(' -- Length: '.cyan + content_length + ' (' + Math.ceil(content_length/1024)+ 'K)');
            console.log(' -- Saving to: '.cyan + '\'' + savedFile + '\'');
        }
    });

    //Write the data stream to local disk
    req.on('data', function(chunk) {
        try{
            bytesRead += chunk.length;
            file.write(chunk);
        }
        catch(E)
        {
            util.die('Could not write file ' + savedFile + '.');
        }
        cli.progress(bytesRead/content_length);
    });

    req.on('end', function() {
        file.on('close', function(e) {
            if(e) {
                util.die('Error downloading app.');
            }
        });
        file.end();
    });

    req.on('error', function(err) {
        util.die(" Server error occurred, please try again later. ".red + err);
    });

}


'use strict';

var path = require('path'),
    util = require('../util'),
    fs = require('fs'),
    querystring = require('querystring'),
    request = require('request'),
    HandleResult = require('./handleResult'),
    logger = require('../logger');

exports.run = function(args, program) {
    var p,
        url,
        globalConfig = util.getGlobalConfig(),
        defaultConfig = util.getDefaultConfig(),
        proxy = util.getProxy();

    if(proxy) {
        logger.debug('ACS CLI is using proxy: ' + proxy.server);
        proxy = proxy.url;
    }
    if(globalConfig.publishHost && !program.isCallback) {
        console.log(('Admin Hostname: ' + globalConfig.publishHost).grey);
    }

    var op = null, va = 0, invalid;
    if(program.set) {
        op = 'set';
        va = program.set;
        invalid = util.validateDomain(va);
        if(invalid) {
            util.die(invalid);
        }
    } else if(program.remove) {
        op = 'remove';
        va = program.remove;
        if(va === true) {
            va = 'MULTI'; // used to differentiate remove requests from 1.0.16 and previous versions
        } else {
            invalid = util.validateDomain(va);
            if(invalid) {
                util.die(invalid);
            }
        }
    } else if(program.path) {
        op = 'path';
        va = program.path;
    } else if(program.check) {
        op = 'check';
        va = 'CHECK';
    }

    // the command line argument will be treated as app name
    var appname = null;
    if (args.length >= 1) {
        appname = args[0];
    } else {
        var dir = program.dir || process.cwd();
        var f = path.join(dir, 'package.json');
        if (!util.exists(f)) {
            util.die('Could not find application directory. Please specify a valid app name or run the command in project dir or with -d to specify a project dir.'.red);
        } else {
            var result = util.readAndValidateConfig(f);
            if(result.success === false){
                util.die(result.message);
            }
            var config = result.config;
            appname = config.name;
        }
    }

    if (op === null) {
        util.die('You must provide required argument and options to continue.');
    }

    var cookie = globalConfig.cookie ? String(globalConfig.cookie).split(';')[0] || [ 'connect-sid', '' ].join('=') : '';

    p = '/domain';
    if (appname) {
        p += '/' + op + '/' + appname + '/' + va;
    }

    url = (globalConfig.publishHost || defaultConfig.publishHost) + ':' + (globalConfig.publishPort || defaultConfig.publishPort) + p;

    if(program.org) {
        url += ('?orgid=' + program.org);
    }

    var HR = new HandleResult();

    if (op === 'remove') {
        HR.checkResult = function(response, result) {
            if (!result.success) {
                if(result.errcode === 256) {
                    // prompt for choose domain
                    var domains = [];

                    console.log('Your app has more than one domains. Please choose one to remove:');
                    program.choose(result.cnames, function(i) {
                        var domain = result.cnames[i];
                        url = url.replace("MULTI", domain);
                        console.log('Removing domain ' + result.cnames[i] + '...');
                        request({
                            uri: encodeURI(url),
                            method: 'POST',
                            proxy: proxy,
                            headers: {
                                'Cookie': cookie,
                                'Content-Type': 'application/x-www-form-urlencoded'
                            }
                        }, HR.handler);

                    });
                } else {
                    console.log('\n');
                    util.die(result.message, result.errcode ? result.errcode : 1);
                }
            } else {
                console.log(result.message);
                process.exit();
            }
        };
    }

    HR.reqParams=['domain', args, program];
    request({
        uri: encodeURI(url),
        method: 'POST',
        proxy: proxy,
        headers: {
            'Cookie': cookie,
            'Content-Type': 'application/x-www-form-urlencoded'
        }
    }, HR.handler);
};
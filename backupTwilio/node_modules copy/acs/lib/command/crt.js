'use strict';

var path = require('path'),
    u = require('../util'),
    fs = require('fs'),
    logger = require('../logger'),
    request = require('request'),
    HandleResult = require('./handleResult'),
    upload = require('../upload'),
    cli = require('../cli');

exports.run = function(args, program) {
    var globalConfig = u.getGlobalConfig(),
        defaultConfig = u.getDefaultConfig(),
        proxy = u.getProxy();

    if(proxy) {
        logger.debug('ACS CLI is using proxy: ' + proxy.server);
        proxy = proxy.url;
    }

    if(globalConfig.publishHost && !program.isCallback) {
        console.log(String(('Admin Hostname: ' + globalConfig.publishHost).grey));
    }

    var name = null;
    if(program.remove) {
        name = program.remove === true ? null : program.remove;
    }
    var appname = u.getAppName(args, program, name);

    // attach our authentication
    var cookie = globalConfig.cookie ? String(globalConfig.cookie).split(';')[0] || [ 'connect-sid', '' ].join('=') : '';

    var host = globalConfig.publishHost || defaultConfig.publishHost, port = globalConfig.publishPort || defaultConfig.publishPort, p = '/certs/' + appname, url = host + ':' + port + p;

    if(program.org) {
        url += ('?orgid=' + program.org);
    }

    var cert = program.add;
    if(cert) {
        add();
    } else if(program.remove) {
        remove();
    } else {
        show();
    }


    function add() {

        var HR = new HandleResult();
        HR.reqParams=['crt', args, program];
        HR.checkResult = function(response, result) {
            if (!result.success) {
                if(result.errcode === 221 || result.errcode === 'EEXISTS') {

                    cli.spinner('Preparing to upload certificate... \n', true);

                    program.confirm('A certificate for this app has already existed. Do you want to replace it (yes/no)? ', function(ok) {
                        if(ok) {
                            cli.spinner('Removing old certificate...');
                            var rmCertURL = (globalConfig.publishHost || defaultConfig.publishHost) + ':'
                                + (globalConfig.publishPort || defaultConfig.publishPort)
                                + '/certs/' + appname;

                            var HR2 = new HandleResult();
                            HR2.reqParams=['crt', args, program];
                            HR2.checkResult = function(response, result) {
                                if (!result.success) {
                                    var message = result.extended || result.message;
                                    u.die('Unable to remove certificate: ' + message, result.errcode ? result.errcode : 1);
                                }
                                cli.spinner('Removing old certificate...done\n', true);
                                uploadCert(cert, url, appname, cookie);
                            };

                            if(program.org) {
                                rmCertURL += ('?orgid=' + program.org);
                            }

                            request({
                                uri: encodeURI(rmCertURL),
                                method: 'DELETE',
                                proxy: proxy,
                                headers: {
                                    'Cookie' : cookie,
                                    'Content-Type': 'application/x-www-form-urlencoded'
                                }
                            }, HR2.handler);

                        } else {
                            process.exit();
                        }
                    });
                } else {
                    u.die(result.message, result.errcode ? result.errcode : 1);
                }
            } else {
                cli.spinner('Preparing to upload certificate... done\n', true);
                uploadCert(cert, url, appname, cookie);
            }
        };

        request({
            uri: encodeURI(url),
            method: 'GET',
            proxy: proxy,
            headers: {
                'Cookie': cookie,
                'Content-Type': 'application/x-www-form-urlencoded'
            }
        }, HR.handler);
    }

    function remove() {

        var rmCertURL = (globalConfig.publishHost || defaultConfig.publishHost) + ':'
            + (globalConfig.publishPort || defaultConfig.publishPort)
            + '/certs/' + appname;

        var HR = new HandleResult();
        HR.reqParams=['crt', args, program];
        HR.checkResult = function(response, result) {
            if (!result.success) {
                var message = result.extended || result.message;
                u.die('Unable to remove certificate: ' + message, result.errcode ? result.errcode : 1);
            }
            console.log(result.message);
        };

        if(program.org) {
            rmCertURL += ('?orgid=' + program.org);
        }

        request({
            uri: encodeURI(rmCertURL),
            method: 'DELETE',
            proxy: proxy,
            headers: {
                'Cookie' : cookie,
                'Content-Type': 'application/x-www-form-urlencoded'
            }
        }, HR.handler);

    }

    function show() {

        var showCertURL = (globalConfig.publishHost || defaultConfig.publishHost) + ':'
            + (globalConfig.publishPort || defaultConfig.publishPort)
            + '/certs/show/' + appname;

        var HR = new HandleResult();
        HR.reqParams=['crt', args, program];
        HR.checkResult = function(response, result) {
            if (!result.success) {
                var message = result.extended || result.message;
                u.die(message, result.errcode ? result.errcode : 1);
            }
            if(result.subjectAltNames) {
                console.log('Subject Alternate Names (SANs): ' + result.subjectAltNames);
            }
            if(result.commonName) {
                console.log('Common Name: ' + result.commonName);
            }
            console.log('Expires: ' + new Date(result.expires));
        };

        if(program.org) {
            showCertURL += ('?orgid=' + program.org);
        }

        request({
            uri: encodeURI(showCertURL),
            method: 'GET',
            proxy: proxy,
            headers: {
                'Cookie' : cookie,
                'Content-Type': 'application/x-www-form-urlencoded'
            }
        }, HR.handler);

    }
};


function uploadCert(file, url, appname, cookie) {

    upload.sendFile(file, url, function(err, buf) {
        if (err) {
            u.die('Error uploading certificate. ' + err);
        }
        try {
            var result = {};
            try {
                result = JSON.parse(buf);
            } catch (e) {
                u.die(buf);
            }
            if (!result.success) {
                if (result.meta) {
                    u.die(result.meta.message, result.errcode ? result.errcode : 1);
                } else {
                    u.die(result.message, result.errcode ? result.errcode : 1);
                }
            } else {
                console.log('Certificate for app ' + appname.blue + ' uploaded.');
                console.log('It may take a while to take effect.');
                process.exit();
            }
        } catch (E) {
            u.die('Error retrieving result ' + E + '. Result was ' + buf);
        }
    }, cookie);

}


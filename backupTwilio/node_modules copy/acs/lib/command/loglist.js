'use strict';

var u = require('../util.js'),
    logger = require('../logger.js'),
    fs = require('fs'),
    program = require('commander'),
    moment = require('moment'),
    path = require('path'),
    request = require('request'),
    _ = require('underscore')._,
    zlib = require('zlib'),
    util = require('util'),
    startLogDateTimeStamp,
    endLogDateTimeStamp;

var
    LOG_TYPE = 'DebugLog';

exports.run = function(args, opts) {

    var globalConfig = u.getGlobalConfig(),
        defaultConfig = u.getDefaultConfig(),
        proxy = u.getProxy();

    if(proxy) {
        logger.debug('ACS CLI is using proxy: ' + proxy.server);
        proxy = proxy.url;
    }
    if(globalConfig.publishHost && !opts.isCallback) {
        console.log(String(('Admin Hostname: ' + globalConfig.publishHost).grey));
    }
    if (opts.build_log && (opts.server_id || opts.show_serverid)) {
        u.die('When retrieving build logs, cannot assign or show server_id');
    }
    if (opts.build_log) {
        console.log('Retrieving build log from the server');
    } else {
        console.log('Retrieving debug log from the server');
    }
    var name = null;
    if(opts.show_serverid) {
        name = opts.show_serverid === true ? null : opts.show_serverid;
    }
    if(opts.more) {
        name = opts.more === true ? null : opts.more;
    }
    var appname = u.getAppName(args, opts, name);

    // Get date variables
    try {
        if (opts.start_date === undefined) {
            startLogDateTimeStamp = 'NODATETME';
        } else {
            var startLogDateTime = new Date(opts.start_date);
            if ((startLogDateTime.toString()) === 'Invalid Date') {
                u.die('Please enter correct start date, format like "2012-08-03 18:36". ');
            } else {
                startLogDateTimeStamp = startLogDateTime.toJSON();
            }
        }

        if (opts.end_date === undefined) {
            endLogDateTimeStamp = 'NODATETME';
        } else {
            var endLogDateTime = new Date(opts.end_date);
            if ((endLogDateTime.toString()) === 'Invalid Date') {
                u.die('Please enter correct end date, format like "2012-08-04 08:28". ');
            } else {
                endLogDateTimeStamp = endLogDateTime.toJSON();
            }
        }

        if (new Date(opts.start_date) > new Date(opts.end_date)) {
            u.die('Start date is large than end date.');
        }
    } catch (error) {
        u.die('Error occured:' + error);
    }

    // Get server id variable
    var serverid = (opts.server_id === undefined ? 'NOSERVERID' : opts.server_id);

    var cookie = globalConfig.cookie ? String(globalConfig.cookie).split(';')[0] || [ 'connect-sid', '' ].join('=') : '';

    var body = {};

    var reqpath;
    if (appname) {
        reqpath = '/' + (opts.build_log ? 'buildlog' : 'log') + '/' + appname + '/';
    } else {
        u.die("App name is required.");
    }

    var lastLogInfo = null;
    if(opts.more) {
        lastLogInfo = u.getLastLogTime(LOG_TYPE);
        if(!lastLogInfo) {
            u.die('Please run the command without --more first!');
        }
        if(lastLogInfo.startTime !== startLogDateTimeStamp || lastLogInfo.endTime !== endLogDateTimeStamp) {
            logger.warn("start_date or end_date has been changed. option 'more' will be ignored.");
            opts.more = false;
        }
    }

    var url = (globalConfig.publishHost || defaultConfig.publishHost) + ':'
            + (globalConfig.publishPort || defaultConfig.publishPort) + reqpath
            + (opts.build_log ? '' : (serverid + '/'))
            + startLogDateTimeStamp + '/' + endLogDateTimeStamp
            + '/' + (opts.more? lastLogInfo.lastLogTime: 'LATEST')
            + '/' + (opts.per_page === undefined ? '100' : opts.per_page);

    if(opts.org) {
        url += ('?orgid=' + opts.org);
    }

    var rawResBody;
    request({
        uri: encodeURI(url),
        method: opts.build_log?'GET':'POST',
        proxy: proxy,
        encoding: null,
        headers: {
            'Cookie' : cookie,
            'Content-Type': 'application/json',
            'accept-encoding' : 'gzip'
        },
        body: JSON.stringify(body)
    }, function(error, response, body){
        if (error) {
            u.die(u.getConnectionErrorMsg(error, body));
        }
        if (response.statusCode === 503) {
            u.die("Admin server is currently unavailable.");
        }
        if (response.statusCode === 502) {
            u.die('Admin server ran into a problem when processing the request.');
        }
        rawResBody = body;
        zlib.gunzip(body, parseResult);
    });

    var parseResult = function(err, unzippedBody) {

        var resbody = unzippedBody;
        if(err) {
            if(err.code === 'Z_DATA_ERROR') { //in case the response body is not zipped
                resbody = rawResBody;
            } else {
                u.die(err);
            }
        }

        var result = {};
        try {
            result = JSON.parse(resbody);
        } catch (e) {
            u.die(resbody);
        }

        if( result.errcode && result.errcode === 100 ) {
            u.requireLogin(function() {
                process.stdin.destroy();
                opts.isCallback = true;
                require('./loglist').run(args, opts);
            });
        } else {
            if (!result.success) {
                u.die(result.message || util.inspect(result), result.errcode ? result.errcode : 1);
            }

            console.log();
            var len = opts.build_log ? result.buildlogs.length : result.logmessages.length,
                logmessage;
            for ( var i = len - 1; i >= 0; i--) {
                logmessage = opts.build_log ? result.buildlogs[i] : result.logmessages[i];
                if(i === len - 1) {
                    u.saveLastLogTime(LOG_TYPE, startLogDateTimeStamp, endLogDateTimeStamp, logmessage.epoch);
                }

                var msg = logmessage.message;
                var d = msg.length - '\n'.length;
                if(d >= 0 && msg.lastIndexOf('\n') === d) {
                    msg = msg.substring(0, d);
                }
                if (msg.lastIndexOf("|") === msg.length - 1 ) {
                    msg = msg.substring(0, msg.length - 1);
                }
                var output = (logmessage.time ? moment(logmessage.time).format() + ' | ' : '')
                    + ((opts.show_serverid && logmessage.serverid) ? '[' + logmessage.serverid + '] ' : '')
                    + msg;
                console.log(output);
            }

            if(logmessage) {
                console.log();
            } else {
                console.log(opts.build_log ? 'No build log found.\n' : 'No debug log found.\n');
            }
        }
    };

};

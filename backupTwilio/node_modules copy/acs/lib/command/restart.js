'use strict';

var path = require('path'),
    util = require('../util'),
    fs = require('fs'),
    querystring = require('querystring'),
    request = require('request'),
    HandleResult = require('./handleResult'),
    logger = require('../logger');

exports.run = function(args, program) {
    var p,
        method,
        url,
        globalConfig = util.getGlobalConfig(),
        defaultConfig = util.getDefaultConfig(),
        proxy = util.getProxy();

    if(proxy) {
        logger.debug('ACS CLI is using proxy: ' + proxy.server);
        proxy = proxy.url;
    }
    if(globalConfig.publishHost && !program.isCallback) {
        console.log(String(('Admin Hostname: ' + globalConfig.publishHost).grey));
    }

    method = 'POST';
 
    var cookie = globalConfig.cookie ? String(globalConfig.cookie).split(';')[0] || [ 'connect-sid', '' ].join('=') : '';

    // Route file is restart 
    p = '/restart';

    // Retrieve the app name and construct the url using the published host and port
    var appname = util.getAppName(args, program);
    // Append the appname to the request
    p += '/' +  appname;
    url = (globalConfig.publishHost || defaultConfig.publishHost) + ':' + (globalConfig.publishPort || defaultConfig.publishPort) + p;
    
    // 
    if(program.org) {
        url += ('?orgid=' + program.org);
    }

    // Create request parameters as options
    var options = {
        uri: encodeURI(url),
        method: method,
        proxy: proxy,
        headers: {
            'Cookie': cookie,
            'Content-Type': 'application/x-www-form-urlencoded'
        }
    };

    // Method to confirm that the user wants to restart the servers
    function confirm(callback) {
        // Show a warning to warn the user that the servers will be restarted
        program.prompt('Warning: This will restart all servers. Proceed [yes/no]: ', function (val) {
            callback(val.trim());
        });
    }

    // Create a new call handler with the reqParams as restart. The 'restart' command requires 
    // login and the request handler will handle this
    var HRC = new HandleResult();
    process.stdin.resume();
    confirm(function checkAnswer(answer) {
        if (answer === 'yes') {
             // Create a request handler
             HRC.reqParams=['restart', args, program];
             options.method = method;
             request(options, HRC.handler);
        } else if (answer === 'no') {
            // Exit the program
            process.exit();
        } else {
            // Ask the user to enter a correct input and check the answer
            console.log("Please type 'yes' or 'no'.");
            confirm(checkAnswer)
        }
    })
         

};

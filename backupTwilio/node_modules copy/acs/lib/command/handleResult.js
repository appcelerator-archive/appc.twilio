'use strict';

var u = require ('../util.js'),
    zlib = require('zlib'),
    _ = require('underscore'),
    logger = require('../logger');

module.exports = exports = function() {

    var self = this;

    this.errorMessage = null;
    this.errorCode = 1;
    this.errorHandler = null;

    this.checkResult = null;
    this.succeed = function(response, result) {
        console.log(result.message);
        if( !self.resumeStdin ){
            process.stdin.destroy();
        }
    };

    this.handler = function(error, response, body) {
        try {
            if (error) {
                if(self.errorHandler){
                    self.errorHandler(error, response, body);
                    process.stdin.destroy();
                    return;
                }
                if(self.errorMessage) {
                    u.die(self.errorMessage + '. ' + error, this.errorCode);
                } else {
                    u.die(u.getConnectionErrorMsg(error, body), this.errorCode);
                }
            }

            if (response.statusCode === 503) {
                u.die("Admin server is currently unavailable.");
            }
            if (response.statusCode === 502) {
                u.die("Admin server ran into a problem when processing the request.");
            }
            if (response.statusCode === 404) {
                u.die(body);
            }
            var params = self.reqParams;
            var result = JSON.parse(body);
            // for user to login after getting error code 100 from stratus
            if( result.errcode && result.errcode === 100 ) {
                // stop spinner if current command is 'publish'
                if(params[0] === 'publish' && self.cli){
                    self.cli.spinner('Preparing application for publish... \n', true);
                }
                u.requireLogin(function() {
                    // destroy stand input after login, except for 'publish', 'config', 'crt', 'new', 'cname', 'domain' and 'server'
                    // because those commands may need further user input
                    if( !_.contains(['publish', 'config', 'crt', 'new', 'cname', 'domain', 'server', 'restart'], params[0]) ){
                        process.stdin.destroy();
                    }
                    // continue previous command after user login successfully
                    params[2].isCallback = true;
                    require('./' + params[0]).run(params[1], params[2]);
                });
            } else {
                if(self.checkResult) {
                    self.checkResult(response, result);
                } else {
                    if (!result.success) {
                        if(result.message) {
                            u.die(result.message + ' ' + (result.extended || ''), result.errcode ? result.errcode : 1);
                        } else {
                            u.die(result.errcode[1] + ' ' + (result.extended || ''), result.errcode[0] ? result.errcode[0] : 1);
                        }
                    }
                    self.succeed(response, result);
                }
            }
        }
        catch(e)
        {
            if(self.errorHandler) {
                self.errorHandler();
            }
            u.die(e);
        }
    };

};

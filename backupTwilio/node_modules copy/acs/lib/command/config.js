'use strict';

var util = require('../util.js'),
    u = require('../util.js'),
    logger = require('../logger.js'),
    fs = require('fs'),
    path = require('path'),
    uuid = require('node-uuid'),
    request = require('request'),
    HandleResult = require('./handleResult'),
    _ = require('underscore')._;

exports.run = function(args, program) {
    var p, method,
        url,
        globalConfig = util.getGlobalConfig(),
        defaultConfig = util.getDefaultConfig(),
        proxy = util.getProxy();

    if(proxy) {
        logger.debug('ACS CLI is using proxy: ' + proxy.server);
        proxy = proxy.url;
    }
    if(globalConfig.publishHost && !program.isCallback) {
        console.log(String(('Admin Hostname: ' + globalConfig.publishHost).grey));
    }

    var op = null, num = 0, vars;
    if(program.maxsize) {
        op = 'max';
        num = program.maxsize;
    } else if(program.minsize) {
        op = 'min';
        num = program.minsize;
    } else if(program.autoscaleup) {
        op = 'autoup';
        num = program.autoscaleup;
        if(num !== 'true' && num !== 'false') {
            util.die('Only true or false allowed for autoscaleup');
        }
    } else if(program.autoscaledown) {
        op = 'autodown';
        num = program.autoscaledown;
        if(num !== 'true' && num !== 'false') {
            util.die('Only true or false allowed for autoscaledown');
        }
    } else if(program.maxqueuedrequests) {
        op = 'maxqueuedrequests';
        num = program.maxqueuedrequests;
    } else if(program.set) {
        op = 'setEnvVar';
        vars = program.set.split(',');
        var configObj = {};

        for (var i = 0; i < vars.length; i++) {
            var arg = vars[i];
            var eqSign = arg.indexOf('=');
            if (eqSign === -1) {
                u.die('Invalid variable: ' + arg);
            }
            var key = arg.substring(0, eqSign);
            if(key.length === 0) {
                u.die('Invalid variable: ' + arg);
            }
            var invalid = u.checkEnvVarName(key);
            if(invalid) {
                u.die(invalid);
            }
            var value = arg.substring(eqSign+1, arg.length);
            if(value.length === 0) {
                u.die('Invalid variable: ' + arg);
            }
            configObj[key] = value;
        }
    } else if(program.unset) {
        op = 'unsetEnvVar';
        vars = program.unset;
    } else if(program.env) {
        op = 'showEnvVar';
    } else if(program.usagenotice) {
        op = 'usagenotice';
        num = program.usagenotice;
        if(num !== 'true' && num !== 'false') {
            util.die('Only true or false allowed for usagenotice');
        }
    } else if(program.nodowntime) {
        op = 'nodowntime';
        num = program.nodowntime;
        if(num !== 'true' && num !== 'false') {
            util.die('Only true or false allowed for nodowntime');
        }
    }

    if (program.inplace) {
        if(op !== 'setEnvVar' && op !== 'unsetEnvVar') {
            util.die('"inplace" should be used with --set or --unset only.');
        }
    }

    // the command line argument will be treated as app name
    var name = null;
    if(op === 'showEnvVar') {
        name = program.env === true ? null : program.env;
    }

    var appname = util.getAppName(args, program, name);

    if (op === null) {
        util.die('You must provide required argument and options to continue.');
    }

    var cookie = globalConfig.cookie ? String(globalConfig.cookie).split(';')[0] || [ 'connect-sid', '' ].join('=') : '';

    p = '/config/' + appname + '/';

    switch(op) {
        case 'showEnvVar':
            p += 'env';
            method = 'GET';
            break;
        case 'setEnvVar':
            p += 'env';
            method = 'POST';
            break;
        case 'unsetEnvVar':
            p += 'env/' + vars;
            method = 'DELETE';
            break;
        default:
            p += (op + '/' + num);
            method = 'GET';
    }

    url = (globalConfig.publishHost || defaultConfig.publishHost) + ':' + (globalConfig.publishPort || defaultConfig.publishPort) + p;


    function doChange(noprompt) {
        if (noprompt) {
            url += '/noprompt';
        }
        if(program.org) {
            url += ('?orgid=' + program.org);
        }
        if (program.inplace) {
            if(url.indexOf('?') !== -1) {
                url += '&inplace=true';
            } else {
                url += '?inplace=true';
            }
        }

        var options = {
            uri: encodeURI(url),
            method: method,
            proxy: proxy,
            headers: {
                'Cookie': cookie,
                'Content-Type': 'application/x-www-form-urlencoded'
            }
        };

        if (op === 'setEnvVar') {
            options.body = JSON.stringify(configObj);
            options.headers['Content-Type'] = 'application/json';
        }

        var HR = new HandleResult();
        HR.reqParams=['config', args, program];
        request(options, HR.handler);
    }


    if(op === 'setEnvVar' || op === 'unsetEnvVar') {

        var HRC = new HandleResult();
        HRC.reqParams=['config', args, program];
        HRC.checkResult = function(response, result) {
            if (!result.success) {
                if(result.message) {
                    u.die(result.message + ' ' + (result.extended || ''), result.errcode ? result.errcode : 1);
                } else {
                    u.die('Failed to get app deployment status: ' + result);
                }
            }
            if (result.message && result.message.deployed === true) { // app has been deployed
                if (result.message.prompt === true) {
                    process.stdin.resume();
                    program.prompt('Making changes to environment variables will restart your app. Proceed [yes/no/always]: ', function(val) {
                        var value = val.trim().toLowerCase();
                        if (['yes', 'y'].indexOf(value) >= 0) {
                            doChange(null);
                        } else if (value === 'always') {
                            doChange('noprompt');
                        } else {
                            process.exit();
                        }
                    });
                } else {
                    doChange('noprompt');
                }
            } else {
                doChange(null);
            }
        };

        var checkURL = (globalConfig.publishHost || defaultConfig.publishHost) + ':' + (globalConfig.publishPort || defaultConfig.publishPort);
        checkURL += '/config/' + appname + '/appstatus';
        if(program.org) {
            checkURL += ('?orgid=' + program.org);
        }

        request({
            uri: encodeURI(checkURL),
            method: 'GET',
            proxy: proxy,
            headers: {
                'Cookie': cookie,
                'Content-Type': 'application/x-www-form-urlencoded'
            }
        }, HRC.handler);

    } else {
        if(program.org) {
            url += ('?orgid=' + program.org);
        }
        var options = {
            uri: encodeURI(url),
            method: method,
            proxy: proxy,
            headers: {
                'Cookie': cookie,
                'Content-Type': 'application/x-www-form-urlencoded'
            }
        };
        var HR = new HandleResult();
        request(options, HR.handler);
    }
};



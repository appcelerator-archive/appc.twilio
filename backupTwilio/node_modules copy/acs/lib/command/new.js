'use strict';

var u = require('../util.js'),
    logger = require('../logger.js'),
    fs = require('fs'),
    program = require('commander'),
    path = require('path'),
    uuid = require('node-uuid'),
    request = require('request'),
    HandleResult = require('./handleResult'),
    _ = require('underscore')._;

exports.run = function(args, program) {
    var name = args[0];

    if (/([$!@`~#%^&\*\(\)\+=\[\]\{\}\|\\:'\?<>,\/;]|\.$|^\.)/.test(name)) {
        u.die("Name is not valid, it contains an invalid symbol.");
    }

    var projectHome = program.dir ? program.dir : process.cwd();
    var projectdir = path.resolve(projectHome, name);

    var now = new Date();
    try {
        fs.mkdirSync(path.join(projectHome, '__acstest__' + now.getTime()));
        fs.rmdirSync(path.join(projectHome, '__acstest__' + now.getTime()));
    } catch(E) {
        u.die('Cannot write to ' + projectHome);
    }

    if (u.exists(projectdir)) {
        if( !program.force) {
            u.die('Unable to create new project: directory "' + projectdir + '" already exists. Please consider to use --force to add an existing project to cloud.');
        } else {
            var f = path.join(projectdir, 'package.json');
            if (!u.exists(f)) {
                u.die(projectdir + "/package.json not found");
            }

            var result = u.readAndValidateConfig(f);
            if(!result.success){
                u.die(result.message);
            }
            var config = result.config;
        }
    }

    var globalConfig = u.getGlobalConfig(),
        defaultConfig = u.getDefaultConfig(),
        proxy = u.getProxy();

    if(proxy) {
        logger.debug('ACS CLI is using proxy: ' + proxy.server);
        proxy = proxy.url;
    }
    if(globalConfig.publishHost && !program.isCallback) {
        console.log(String(('Admin Hostname: ' + globalConfig.publishHost).grey));
    }

    var type = 'mvc';
    if (program.framework) {
        if(program.framework === 'none') {
            type = 'none';
        } else {
            u.die('Invalid value \'' + program.framework + '\' for --framework option. Availabe value is \'none\'.');
        }
    }

    var cookie = globalConfig.cookie ? String(globalConfig.cookie).split(';')[0] || [ 'connect-sid', '' ].join('=') : '';

    var url = (globalConfig.publishHost || defaultConfig.publishHost) + ':'
            + (globalConfig.publishPort || defaultConfig.publishPort)
            + '/create/' + name;

    var HR = new HandleResult();
    HR.reqParams=['new', args, program];
    HR.checkResult = function(response, result) {

        if (!result.success) {
            if(result.errcode === 265) {
                // prompt for choose an organization
                var orgs = [], orgids = [], orgid;
                for(orgid in result.organizations) {
                    if(result.organizations.hasOwnProperty(orgid)) {
                        orgids.push(orgid);
                        var org = '';
                        org += result.organizations[orgid].name;
                        org += (' (' + orgid + ')');
                        orgs.push(org);
                    }
                }

                console.log('You belong to more than one organization. Please choose one to create the app for.');
                program.choose(orgs, function(i) {
                    var orgid = orgids[i];
                    console.log('Creating new Node.ACS app for organization ' + orgs[i] + '...');
                    request({
                        uri: encodeURI(url),
                        method: 'POST',
                        proxy: proxy,
                        headers: {
                            'Cookie': cookie,
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({orgid: orgid})
                    }, HR.handler);

                });
            } else {
                console.log('\n');
                u.die(result.message, result.errcode ? result.errcode : 1);
            }
        } else {
            succeed(response, result);
            process.exit();
        }
    };

    var succeed = function(response, result) {
        if (!u.exists(projectdir)) {
            logger.debug("Creating project at: " + projectdir);
            fs.mkdirSync(projectdir);
            var serviceDef;
            if(type === 'mvc') {
                // generate the default service index
                u.generateTemplate('mvc/app.js', {}, path.join(projectdir, 'app.js'));

                // generate the default README.md
                u.generateTemplate('mvc/README.md', {}, path.join(projectdir, 'README.md'));

                // generate the default config.json
                u.generateTemplate('mvc/config.json', {}, path.join(projectdir, 'config.json'));

                // generate sample controllers
                u.generateTemplateDir('mvc/controllers', {}, path.join(projectdir, 'controllers'));

                // generate sample websockets
                u.generateTemplateDir('mvc/websockets', {}, path.join(projectdir, 'websockets'));

                // generate sample filters
                u.generateTemplateDir('mvc/filters', {}, path.join(projectdir, 'filters'));

                // generate sample views
                u.generateTemplateDir('mvc/views', {}, path.join(projectdir, 'views'));

                // generate sample public
                u.generateTemplateDir('mvc/public', {}, path.join(projectdir, 'public'));

                // generate the new config file
                serviceDef = { "name" : name };
                addServiceInfo(serviceDef);

                u.generateTemplate('mvc/package.json', serviceDef, path.join(projectdir, 'package.json'), true);

            } else if(type === 'none') {
                // generate the default service index
                u.generateTemplate('free/app.js', {}, path.join(projectdir, 'app.js'));

                // generate the default README.md
                u.generateTemplate('free/README.md', {}, path.join(projectdir, 'README.md'));

                // generate the new config file
                serviceDef = { "name" : name };
                addServiceInfo(serviceDef);

                u.generateTemplate('free/package.json', serviceDef, path.join(projectdir, 'package.json'), true);
            }

            console.log("New project created at " + projectdir.cyan);

        } else {
            console.log('Existing project at ' + projectdir.cyan + ' added to cloud');
        }


        function addServiceInfo(serviceDef) {
            var serviceInfo = {};
            serviceInfo.env_id = (program.env? program.env: '');
            serviceInfo.org_id = (program.org? program.org: '');
            serviceDef.serviceInfo = '"service": ' + JSON.stringify(serviceInfo) + ',';
        }

    };


    var body = {};
    if(program.org) {
        body.orgid = program.org;
    }

    request({
        uri: encodeURI(url),
        method: 'POST',
        proxy: proxy,
        headers: {
            'Cookie': cookie,
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(body)
    }, HR.handler);

};

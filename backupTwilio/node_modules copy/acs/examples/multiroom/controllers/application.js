var logger = require('acs').logger;

/**
 * Render the home page which will either ask user to login or display a list of available rooms.
 * @param req
 * @param res
 */
function index(req, res) {
    var rooms = getRoom(req);
    res.render('index', {user: req.session.user, rooms: rooms});
}

/**
 * Render login page
 * @param req
 * @param res
 */
function login(req, res) {
	res.render('login');
}

/**
 * Render signup page
 * @param req
 * @param res
 */
function signup(req, res) {
	res.render('signup');
}

/**
 * Get in a chat room. Will first open the room if it doesn't exist.
 * @param req
 * @param res
 */
function chatroom(req, res) {
    var room = req.param('name');
    var nameToSearch = room == 'default'?'':room;
    var rooms = getRoom(req);
    if(rooms.indexOf(nameToSearch) == -1)
        openNewRoom(req, room);
    res.render('chatroom', {user: req.session.user, room: room});
}

/**
 * Get available rooms currently
 * @param req
 * @returns {Array} array of room names. The name of the default room listening on '/' is ''.
 */
function getRoom(req) {
    var rooms = [];
    for(room in req.app.io.rooms) {
        if(room.indexOf('/') == 0)
            room = room.substring(1);
        rooms.push(room);
    }
    return rooms;
}

/**
 * Start listening on a new path (room)
 * @param req
 * @param room name of the room. The passed in name for the default room should be 'default'.
 */
function openNewRoom(req, room) {

    if(room == 'default') {
        logger.warn('Open default room');
        req.app.io.on('connection', handleConnection);
    } else {
        logger.warn('Open room: ' + room);
        req.app.io.of('/' + room).on('connection', handleConnection)
    }

    function handleConnection(socket) {
        if (!socket) {
            var msg = 'Error in socket connection.'
            logger.error(msg);
            throw msg;
        }

        socket.on('msg', function(data) {
            socket.broadcast.emit('message', data);
        });
    }
}
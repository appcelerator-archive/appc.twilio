'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/* eslint no-unused-expressions:0 */
var _ = require('lodash');
var request = require('request');
var urljoin = require('url-join');
var qs = require('qs');
var WrappedResponse = require('./WrappedResponse');

var RESPONSE_FIELDS = ['httpVersion', 'headers', 'url', 'statusCode'];

var TestController = function () {
	function TestController(ctx) {
		_classCallCheck(this, TestController);

		this.ctx = ctx;
	}

	_createClass(TestController, [{
		key: 'formatAPIUrl',
		value: function formatAPIUrl(wrappedRequest) {
			// Format the url
			var path = wrappedRequest.path;

			// Format the path params
			var pathParams = wrappedRequest.params && wrappedRequest.params.path || {};
			if (Object.keys(pathParams).length > 0) {
				path = path.replace(/:\w+\?*/g, function (param) {
					var optional = false;
					var name = param.substring(1);
					if (name[name.length - 1] === '?') {
						name = name.substring(0, name.length - 1);
						optional = true;
					}

					var value = pathParams[name] !== undefined && pathParams[name] !== null ? pathParams[name] : '';

					if (!optional && !value) {
						throw new Error(name + ' required.');
					}
					return value;
				});
			}

			// Remove duplicate and trailing slashes
			path = path.replace(/\/{2,}/g, '/').replace(/\/$/g, '');

			// Format the query string
			var queryParams = wrappedRequest.params && wrappedRequest.params.query || {};
			if (Object.keys(queryParams).length > 0) {
				// Omit empty params
				Object.keys(queryParams).filter(function (key) {
					return queryParams[key] === undefined || queryParams[key] === null || queryParams[key] === '';
				}).forEach(function (key) {
					delete queryParams[key];
				});
				path = urljoin(path, '?' + qs.stringify(queryParams));
			}

			// Connect to local arrow
			return 'http://127.0.0.1:' + this.ctx.arrow.port + path;
		}
	}, {
		key: 'testApi',
		value: function testApi(opts, resolve) {
			var _this = this;

			// Make the request
			var ts = Date.now();

			request(opts, function (err, response, body) {
				var duration = Date.now() - ts;

				if (err) {
					console.error(err);
				}

				// allow the auth plugin to handle the response too and potentially change it
				if (_this.ctx.arrow.authstrategy) {
					body = _this.ctx.arrow.authstrategy.applyResponseForTest(response, body);
				}

				resolve(new WrappedResponse({
					success: !err || response && response.statusCode >= 202 || false,
					response: response ? _.pick(response, RESPONSE_FIELDS) : { statusCode: 404 },
					result: body,
					responseTime: duration,
					responseSize: response && response.headers['content-length'] || 0
				}));
			});
		}
	}, {
		key: 'invoke',
		value: function invoke(wrappedRequest, headers) {
			var _this2 = this;

			return new Promise(function (resolve) {
				// Verify the API exists
				var api = _this2.ctx.arrow.getAPI(wrappedRequest.path, wrappedRequest.method);

				if (!api) {
					console.error('No api found for ' + wrappedRequest.method + ' ' + wrappedRequest.path);
					resolve(new WrappedResponse({
						success: false,
						response: {
							statusCode: 400
						},
						responseTime: 0
					}));
					return;
				}

				var url = void 0;
				try {
					url = _this2.formatAPIUrl(wrappedRequest);
				} catch (err) {
					resolve(new WrappedResponse({
						success: false,
						response: {
							statusCode: 400
						},
						result: err.message,
						responseSize: 0,
						responseTime: 0
					}));
					return;
				}

				var opts = {
					method: wrappedRequest.method || 'GET',
					url: url,
					headers: {
						cookie: headers.cookie
					}
				};

				// Pass the request body
				if (wrappedRequest.params && wrappedRequest.params.body) {
					if (_typeof(wrappedRequest.params.body) === 'object') {
						opts.json = wrappedRequest.params.body;
					} else {
						opts.body = wrappedRequest.params.body;
					}
				}

				// Configure the request settings
				opts.followRedirect = !!wrappedRequest.followRedirect;
				opts.followAllRedirects = !!wrappedRequest.followRedirect;
				opts.gzip = !!wrappedRequest.gzip;

				// Configure the headers
				if (wrappedRequest.headers) {
					Object.keys(wrappedRequest.headers).forEach(function (name) {
						opts.headers[name] = wrappedRequest.headers[name];
					});
				}
				opts.headers['Content-Type'] = opts.headers['Content-Type'] || 'application/json';
				opts.headers['User-Agent'] = opts.headers['User-Agent'] || 'Appcelerator API Tester/1.0';

				// Add our authentication as required by the authentication plugin
				if (_this2.ctx.arrow.authstrategy) {
					_this2.ctx.arrow.authstrategy.applyCredentialsForTest(opts);
				}

				// Make the request & resolve the promise
				_this2.testApi(opts, resolve);
			});
		}
	}]);

	return TestController;
}();

exports = module.exports = TestController;
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* A wrapper containing the details for making an API request.
* @public
*/
var WrappedRequest = function () {
	/**
 * Create a WrappedRequest.
 *
 * @param {object} wrappedRequest - The values to initialize this WrappedRequest with.
 */
	function WrappedRequest(requestWrapper) {
		_classCallCheck(this, WrappedRequest);

		Object.assign(this, requestWrapper);

		if (!WrappedRequest.validate(this)) {
			throw new Error('Invalid wrapped request.');
		}
	}

	/**
 * The swagger schema for a WrappedRequest.
 * @return {object} - The schema for a WrappedRequest.
 */


	_createClass(WrappedRequest, null, [{
		key: 'validate',


		/**
  * Validate that object is a WrappedRequest.
  * @param {WrappedRequest|object} obj - The object to validate.
  * @return {boolean} - true if the object is a valid WrappedRequest.
  */
		value: function validate(obj) {
			var valid = true;
			this.schema.required.forEach(function (prop) {
				if (!obj.hasOwnProperty(prop)) {
					valid = false;
				}
			});

			return valid;
		}
	}, {
		key: 'schema',
		get: function get() {
			return {
				title: 'Request Wrapper',
				type: 'object',
				properties: {
					path: {
						type: 'string'
					},
					method: {
						type: 'string'
					},
					followRedirects: {
						type: 'boolean'
					},
					gzip: {
						type: 'boolean'
					},
					headers: {
						type: 'object'
					},
					params: {
						type: 'object',
						properties: {
							path: {
								type: 'object'
							},
							query: {
								type: 'object'
							},
							body: {
								type: 'object'
							}
						}
					}
				},
				required: ['path', 'method']
			};
		}
	}]);

	return WrappedRequest;
}();

exports = module.exports = WrappedRequest;
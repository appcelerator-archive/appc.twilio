'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var WrappedRequest = require('./WrappedRequest');
var WrappedResponse = require('./WrappedResponse');
var APIProvider = require('../APIProvider');
var BadRequestError = require('../errors/BadRequestError');

var TestAPI = function (_APIProvider) {
	_inherits(TestAPI, _APIProvider);

	function TestAPI() {
		_classCallCheck(this, TestAPI);

		return _possibleConstructorReturn(this, (TestAPI.__proto__ || Object.getPrototypeOf(TestAPI)).apply(this, arguments));
	}

	_createClass(TestAPI, null, [{
		key: 'bind',
		value: function bind(controller) {
			var swagger = controller.ctx.swagger;

			swagger.schema('WrappedRequest', WrappedRequest.schema).schema('WrappedResponse', WrappedResponse.schema).post('/test').operationId('testapi').body('WrappedRequest', 'The details of the API to test.').tag('test').summary('Test the API.').response(200, 'OK', 'WrappedResponse').response(400).response(500).action(function (req, res) {
				var wrapper = void 0;

				try {
					try {
						wrapper = new WrappedRequest(req.body);
					} catch (ex) {
						throw new BadRequestError(ex.message);
					}

					controller.invoke(wrapper, req.headers).then(function (data) {
						res.status(200).send(data);
					}).catch(function (ex) {
						APIProvider.handleError(ex, res, 400, 500);
					});
				} catch (ex) {
					APIProvider.handleError(ex, res, 400, 500);
				}
			});
		}
	}]);

	return TestAPI;
}(APIProvider);

exports = module.exports = TestAPI;
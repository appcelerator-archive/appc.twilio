'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var InternalServerError = require('./errors/InternalServerError'),
    BadRequestError = require('./errors/BadRequestError'),
    NotFoundError = require('./errors/NotFoundError'),
    UnauthorizedError = require('./errors/UnauthorizedError');

var ERROR_MAP = {
	400: BadRequestError,
	401: UnauthorizedError,
	404: NotFoundError,
	500: InternalServerError
};

var APIProvider = function () {
	function APIProvider() {
		_classCallCheck(this, APIProvider);

		throw new Error('Derrived instances must use static.');
	}

	_createClass(APIProvider, null, [{
		key: 'bind',
		value: function bind() {}
	}, {
		key: 'handleError',
		value: function handleError(ex, res) {
			var status = 500;
			var content = void 0;

			for (var _len = arguments.length, errorCodes = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
				errorCodes[_key - 2] = arguments[_key];
			}

			var _iteratorNormalCompletion = true;
			var _didIteratorError = false;
			var _iteratorError = undefined;

			try {
				for (var _iterator = errorCodes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
					var errorCode = _step.value;

					if (!ERROR_MAP.hasOwnProperty(errorCode)) {
						console.error('APIProvider.handleError does not define code:', errorCode);
					} else if (ex instanceof ERROR_MAP[errorCode]) {
						status = errorCode;
						content = ex.message;
						break;
					}
				}

				// firefox has a problem with no content being set when the code is not 204/304
			} catch (err) {
				_didIteratorError = true;
				_iteratorError = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion && _iterator.return) {
						_iterator.return();
					}
				} finally {
					if (_didIteratorError) {
						throw _iteratorError;
					}
				}
			}

			res.status(status).send(content || status + ' Error');

			if (status >= 500) {
				console.error('Unexpected error:', ex);
			}
		}
	}]);

	return APIProvider;
}();

exports = module.exports = APIProvider;
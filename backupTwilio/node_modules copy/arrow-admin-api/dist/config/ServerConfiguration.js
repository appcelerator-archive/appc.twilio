'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/* eslint no-unused-expressions:0 */
/**
 * The Arrow server configuration.
 * @public
 */
var ServerConfiguration = function () {
	/**
  * Create a ServerConfiguration.
  *
  * @param {string} name - The configuration file name..
  * @param {array} envs - The environments that this file contributes to.
  * @param {string} content - The content of the configuration file.
  */
	function ServerConfiguration(name, envs, content) {
		_classCallCheck(this, ServerConfiguration);

		this.name = name;
		this.envs = [].concat(envs);
		content && (this.content = content);

		if (!ServerConfiguration.validate(this)) {
			throw new Error('Invalid server configuration');
		}
	}

	/**
  * The swagger schema for a SystemConfig.
  * @return {object} - The schema for a SystemConfig.
  */


	_createClass(ServerConfiguration, null, [{
		key: 'validate',


		/**
   * Validate that object is a ServerConfiguration.
   * @param {ServerConfiguration|object} obj - The object to validate.
   * @return {boolean} - true if the object is a valid ServerConfiguration.
   */
		value: function validate(obj) {
			var valid = true;
			ServerConfiguration.schema.required.forEach(function (prop) {
				if (!obj.hasOwnProperty(prop)) {
					valid = valid && false;
				} else {
					valid = valid && obj[prop] !== undefined;
				}
			});

			return valid;
		}
	}, {
		key: 'schema',
		get: function get() {
			return {
				title: 'Server Configuration',
				type: 'object',
				properties: {
					name: {
						type: 'string'
					},
					envs: {
						type: 'array',
						items: {
							type: 'string'
						}
					},
					content: {
						type: 'string'
					}
				},
				required: ['name', 'envs']
			};
		}
	}]);

	return ServerConfiguration;
}();

exports = module.exports = ServerConfiguration;
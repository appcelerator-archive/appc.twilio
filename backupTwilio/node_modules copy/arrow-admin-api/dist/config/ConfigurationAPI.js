'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var APIProvider = require('../APIProvider');
var ServerConfiguration = require('./ServerConfiguration');

// jscs:disable jsDoc

var ConfigurationAPI = function (_APIProvider) {
	_inherits(ConfigurationAPI, _APIProvider);

	function ConfigurationAPI() {
		_classCallCheck(this, ConfigurationAPI);

		return _possibleConstructorReturn(this, (ConfigurationAPI.__proto__ || Object.getPrototypeOf(ConfigurationAPI)).apply(this, arguments));
	}

	_createClass(ConfigurationAPI, null, [{
		key: 'bind',
		value: function bind(controller) {
			var swagger = controller.ctx.swagger;

			swagger.schema('ServerConfiguration', ServerConfiguration.schema);

			swagger.get('/config').operationId('listConfigs').tag('config').summary('Lists all the server configuration files.').parameter({ in: 'query', name: 'env', type: 'string', description: 'Limit the selection to a single environment.' }).response(200, 'OK', 'ServerConfiguration', true).response(400).response(404).response(500).action(function (req, res) {
				try {
					controller.listConfigs(req.query && req.query.env).then(function (data) {
						res.status(200).send(data);
					}).catch(function (ex) {
						APIProvider.handleError(ex, res, 400, 404, 500);
					});
				} catch (ex) {
					APIProvider.handleError(ex, res, 500);
				}
			});

			swagger.get('/config/:name').operationId('getConfig').tag('config').summary('Get the specified server configuration file.').parameter({ in: 'path', name: 'name', type: 'string', description: 'The name of the configuration file.' }).response(200, 'OK', 'ServerConfiguration').response(400).response(404).response(500).action(function (req, res) {
				try {
					controller.getConfig(req.params.name).then(function (data) {
						res.status(200).send(data);
					}).catch(function (ex) {
						APIProvider.handleError(ex, res, 400, 404, 500);
					});
				} catch (ex) {
					APIProvider.handleError(ex, res, 500);
				}
			});

			swagger.put('/config/:name').operationId('updateConfig').tag('config').summary('Update the configuration file.').parameter({ in: 'path', name: 'name', type: 'string', description: 'The name of the configuration file.' }).body('ServerConfiguration', 'The server configuration to save.').response(204, 'No Content').response(400).response(404).response(500).action(function (req, res) {
				try {
					controller.updateConfig(req.params.name, req.body).then(function () {
						res.status(204).send();
					}).catch(function (ex) {
						APIProvider.handleError(ex, res, 400, 404, 500);
					});
				} catch (ex) {
					APIProvider.handleError(ex, res, 500);
				}
			});
		}
	}]);

	return ConfigurationAPI;
}(APIProvider);

exports = module.exports = ConfigurationAPI;
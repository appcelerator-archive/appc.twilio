"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * An extendable Error for use when defining exceptions.
 * sourced: http://stackoverflow.com/questions/31089801/extending-error-in-javascript-with-es6-syntax
 * @public
 * @class
 */
var ExtendableError = function () {
	/**
  * Create an Extendable error.
  * @constructor
  * @param {string} message - The error message.
  */
	function ExtendableError(message) {
		_classCallCheck(this, ExtendableError);

		this.name = this.constructor.name;
		this.message = message;
		this.stack = new Error(message).stack;
	}

	/**
  * Convert to a string.
  */


	_createClass(ExtendableError, [{
		key: "toString",
		value: function toString() {
			return this.message;
		}
	}]);

	return ExtendableError;
}();

ExtendableError.prototype = Object.create(Error.prototype);

exports = module.exports = ExtendableError;
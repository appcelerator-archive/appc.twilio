'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Connector = function () {
	function Connector() {
		_classCallCheck(this, Connector);
	}

	_createClass(Connector, null, [{
		key: 'validate',
		value: function validate(connector) {
			var valid = true;
			this.schema.required.forEach(function (prop) {
				if (!{}.hasOwnProperty.call(connector, prop)) {
					valid = false;
				}
			});
			return valid;
		}
	}, {
		key: 'schema',
		get: function get() {
			return {
				title: 'Connector',
				properties: {
					name: {
						type: 'string'
					},
					description: {
						type: 'string'
					},
					version: {
						type: 'string'
					}
				},
				required: ['name', 'description']
			};
		}
	}]);

	return Connector;
}();

exports = module.exports = Connector;
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ConnectorsController = function () {
	function ConnectorsController(ctx) {
		_classCallCheck(this, ConnectorsController);

		this.ctx = ctx;
	}

	/*
  * returns an array of installed connectors
  */


	_createClass(ConnectorsController, [{
		key: 'getConnectors',
		value: function getConnectors() {
			var _this = this;

			return new Promise(function (resolve) {
				var memory = _this.ctx.arrow.getConnector('memory');
				var arrowConnectors = _this.ctx.arrow.getConnectors();
				if (!memory || !arrowConnectors.memory) {
					// Arrow doesn't add the memory connector if nothing is using it yet. Don't ask me why.
					console.warn('failed to load memory connector');
				}
				var connectors = Object.getOwnPropertyNames(arrowConnectors).map(function (key) {
					var connector = arrowConnectors[key];
					var returnedConnector = {
						name: connector.name,
						description: connector.description
					};
					// only add version if it exists
					if (connector.version) {
						returnedConnector.version = connector.version;
					}
					return returnedConnector;
				});
				// sort by name - memory comes first
				connectors.sort(function (a, b) {
					var memory = 'memory';
					if (b.name === memory || a.name > b.name) {
						return 1;
					} else if (a.name === memory || b.name > a.name) {
						return -1;
					}
					return 0;
				});
				resolve(connectors);
			});
		}
	}]);

	return ConnectorsController;
}();

exports = module.exports = ConnectorsController;
'use strict';

/* eslint no-else-return:0 */
/* eslint no-useless-escape:0 */
/**
 * This code is closed source and Confidential and Proprietary to
 * Appcelerator, Inc. All Rights Reserved.  This code MUST not be
 * modified, copied or otherwise redistributed without express
 * written permission of Appcelerator. This file is licensed as
 * part of the Appcelerator Platform and governed under the terms
 * of the Appcelerator license agreement.
 */
var fs = require('fs'),
    path = require('path'),
    http = require('http'),
    readline = require('readline'),
    Logger = require('appc-logger'),
    devnull = require('dev-null');

// jscs:disable jsDoc

function logFileExists(logdir, reqId) {
	var filename = path.join(logdir, 'request-' + reqId + '.log.metadata');
	return fs.existsSync(filename);
}

function quietClose(s) {
	try {
		s.close();
	} catch (err) {
		// ignore
	}
}

function readLogFile(reqlog, lineCallback, doneCallback) {
	if (!fs.existsSync(reqlog)) {
		doneCallback();
		return;
	}
	var instream = fs.createReadStream(reqlog);
	var rl = readline.createInterface({ input: instream, output: devnull() });
	rl.setPrompt('');
	rl.on('line', function (line) {
		try {
			if (lineCallback(JSON.parse(line))) {
				instream.pause();
				quietClose(instream);
				rl.close();
			}
		} catch (err) {
			instream.pause();
			quietClose(instream);
			this.emit('error', err);
		}
	});
	rl.on('error', doneCallback);
	rl.on('close', doneCallback);
	return;
}

function statusMessage(code) {
	return http.STATUS_CODES[String(code)];
}

function formatLogLevel(level) {
	switch (level) {
		case Logger.TRACE:
			return 'TRACE';
		case Logger.DEBUG:
			return 'DEBUG';
		case Logger.INFO:
			return 'INFO';
		case Logger.WARN:
			return 'WARN';
		case Logger.ERROR:
			return 'ERROR';
		case Logger.FATAL:
			return 'FATAL';
		default:
			return 'INFO';
	}
}

function getSafeReqId(req) {
	var id = req;
	if (typeof id !== 'string') {
		id = req.params && req.params.id || req._params && req._params.id;
	}
	return (id || '').replace(/[\/\\\.]/g, '');
}

function getRequestLogPathFromId(dir, reqId) {
	var safeId = getSafeReqId(reqId);
	return path.join(dir, 'request-' + safeId + '.log');
}

function getRequestLogPath(dir, req) {
	return getRequestLogPathFromId(dir, req);
}

function isLoggedIn(req, expectedSecret) {
	if (!req || !req.cookies) {
		return false;
	}
	var actualSecret = req.cookies.sessionsecret;
	return !!actualSecret && actualSecret === expectedSecret;
}

function getObjValue(obj, key) {
	return key.split('.').reduce(function (o, x) {
		return typeof o === 'undefined' || o === null ? o : o[x];
	}, obj);
}

exports.readLogFile = readLogFile;
exports.statusMessage = statusMessage;
exports.getSafeReqId = getSafeReqId;
exports.getRequestLogPath = getRequestLogPath;
exports.getRequestLogPathFromId = getRequestLogPathFromId;
exports.isLoggedIn = isLoggedIn;
exports.logFileExists = logFileExists;
exports.getObjValue = getObjValue;
exports.formatLogLevel = formatLogLevel;
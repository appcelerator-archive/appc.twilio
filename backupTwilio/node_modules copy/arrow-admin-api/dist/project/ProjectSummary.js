'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The summary of the project details.
 * Information from the project's package.json and the Arrow config.
 * @public
 */
var ProjectSummary = function () {
	/**
  * Create a ProjectSummary.
  *
  * @param {object} projectSummary - The values to initialize this ProjectSummary with.
  */
	function ProjectSummary(projectSummary) {
		_classCallCheck(this, ProjectSummary);

		Object.assign(this, projectSummary);
	}

	/**
  * The swagger schema for a ProjectSummary.
  * @return {object} - The schema for a ProjectSummary.
  */


	_createClass(ProjectSummary, null, [{
		key: 'validate',


		/**
   * Validate that object is a ProjectSummary.
   * @param {ProjectSummary|object} projectSummary - The object to validate.
   * @return {boolean} - true if the object is a valid ProjectSummary.
   */
		value: function validate(projectSummary) {
			var valid = true;
			this.schema.required.forEach(function (prop) {
				if (!projectSummary.hasOwnProperty(prop)) {
					valid = false;
				}
			});

			return valid;
		}
	}, {
		key: 'schema',
		get: function get() {
			return {
				title: 'Project Summary',
				type: 'object',
				properties: {
					name: {
						type: 'string'
					},
					version: {
						type: 'string'
					},
					author: {
						type: 'string'
					},
					description: {
						type: 'string'
					},
					license: {
						type: 'string'
					},
					apikey: {
						type: 'string'
					}
				},
				required: ['name']
			};
		}
	}]);

	return ProjectSummary;
}();

exports = module.exports = ProjectSummary;
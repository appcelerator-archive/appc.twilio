'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/* eslint global-require:0 */
var path = require('path');

/**
 * The controller implementing the actions for interacting with the Project.
 * @public
 */

var ProjectController = function () {
  /**
   * Create a ProjectController.
   * @param {object} ctx - The context for this controller.
   * @param {express} ctx.app - The express application.
   * @param {string} ctx.prefix - The prefix bound to.
   * @param {Arrow} ctx.arrow - The Arrow server.
   * @param {boolean} ctx.devmode - Flag indicating if this is a devmode server.
   * @param {Swagger} ctx.swagger - openapi-doc instance.
   */
  function ProjectController(ctx) {
    _classCallCheck(this, ProjectController);

    this.ctx = ctx;
  }

  /**
   * Get the project summary.
   * @return {object} summary - The project summary.
   * @return {string} summary.name - The project name.
   * @return {string} summary.version - The project version.
   * @return {string} summary.author - The project author.
   * @return {string} summary.description - The project description.
   * @return {string} summary.license - The project license.
   * @return {string} summary.apikey - The project apikey.
   */


  _createClass(ProjectController, [{
    key: 'getSummary',
    value: function getSummary() {
      var _this = this;

      return new Promise(function (resolve) {
        var config = _this.ctx.arrow.config;
        var pkg = require(path.join(config.dir || process.cwd(), 'package'));

        resolve({
          name: pkg.name,
          version: pkg.version,
          author: pkg.author,
          description: pkg.description,
          license: pkg.license,
          apikey: config.apikey
        });
      });
    }
  }]);

  return ProjectController;
}();

exports = module.exports = ProjectController;
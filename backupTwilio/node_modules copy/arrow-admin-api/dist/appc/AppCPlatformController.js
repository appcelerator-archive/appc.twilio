'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var AppC = require('appc-platform-sdk');

// jscs:disable jsDoc

var AppCPlatformController = function () {
	function AppCPlatformController(ctx) {
		_classCallCheck(this, AppCPlatformController);

		this.appcSessionToken = decodeURIComponent(process.env.APPC_SESSION_TOKEN);
		this.ctx = ctx;

		// TODO: Investigate longevity of this session
		// TODO: FIX SESSION - 1 day timeout by default
		this.sessionPromise = new Promise(function (resolve, reject) {
			AppC.Auth.createSessionFromID(process.env.APPC_SESSION_SID, function (err, session) {
				if (err) {
					reject(err);
				} else {
					resolve(session);
				}
			});
		});
	}

	_createClass(AppCPlatformController, [{
		key: 'findOrgById',
		value: function findOrgById(id) {
			return this.sessionPromise.then(function (session) {
				return new Promise(function (resolve, reject) {
					AppC.Org.findById(session, id, function (err, orgs) {
						if (err) {
							reject(err);
						} else {
							resolve(orgs);
						}
					});
				});
			});
		}
	}, {
		key: 'getNodeACSService',
		value: function getNodeACSService(serviceName) {
			return this.sessionPromise.then(function (session) {
				return new Promise(function (resolve, reject) {
					AppC.createRequest(session, '/api/v1/nodeacs/service/' + encodeURIComponent(serviceName) + '/default', function (err, service) {
						if (err) {
							reject(err);
						} else {
							resolve(service);
						}
					});
				});
			});
		}
	}]);

	return AppCPlatformController;
}();

exports = module.exports = AppCPlatformController;
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var NotFoundError = require('../errors/NotFoundError');

var APIsController = function () {
	function APIsController(ctx) {
		_classCallCheck(this, APIsController);

		this.ctx = ctx;
	}

	/*
  * returns an array of summaries (group name, endpoint count)
  * for each API group
  */


	_createClass(APIsController, [{
		key: 'getGroupSummaries',
		value: function getGroupSummaries() {
			var _this = this;

			return new Promise(function (resolve) {
				var groups = {},
				    summaries = _this.ctx.arrow.apis.filter(function (api) {
					if (!api.enabled) {
						return false;
					}
					return {}.hasOwnProperty.call(groups, api.group) ? !++groups[api.group] : groups[api.group] = 1;
				}).map(function (api) {
					return {
						group: api.group,
						endpointCount: groups[api.group]
					};
				});
				resolve(summaries);
			});
		}

		/*
   * returns endpoints for all APIs
   * opts.group : filters based on group name
   */

	}, {
		key: 'getEndpoints',
		value: function getEndpoints(opts) {
			var _this2 = this;

			var group = opts && opts.group;
			return new Promise(function (resolve) {
				// clean up some stuff from the api object
				var apis = _this2.ctx.arrow.apis.map(function (api) {
					var clone = JSON.parse(JSON.stringify(api));
					delete clone.arrow;
					delete clone.config;
					delete clone.model;
					return clone;
				});

				// perform the endpoint filter
				apis = apis.filter(function (api) {
					return (
						// remove disabled apis
						api.enabled && (
						// filter based on optional group param
						group ? api.group === group : true)
					);
				});

				// throw an error if there's a group specified and nothing matches
				if (group && !apis.length) {
					throw new NotFoundError();
				}

				resolve(apis);
			});
		}
	}]);

	return APIsController;
}();

exports = module.exports = APIsController;
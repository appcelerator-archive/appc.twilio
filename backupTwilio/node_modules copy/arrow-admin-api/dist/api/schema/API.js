'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var API = function () {
	function API() {
		_classCallCheck(this, API);
	}

	_createClass(API, null, [{
		key: 'validate',
		value: function validate(api) {
			var valid = true;
			this.schema.required.forEach(function (prop) {
				if (!{}.hasOwnProperty.call(api, prop)) {
					valid = false;
				}
			});
			return valid;
		}
	}, {
		key: 'schema',
		get: function get() {
			return {
				title: 'API',
				properties: {
					generated: {
						type: 'boolean'
					},
					group: {
						type: 'string'
					},
					path: {
						type: 'string'
					},
					method: {
						type: 'string'
					},
					description: {
						type: 'string'
					},
					before: {},
					after: {},
					parameters: {
						type: 'object'
					},
					txenabled: {
						type: 'boolean'
					},
					enabled: {
						type: 'boolean'
					},
					sort: {
						type: 'integer'
					},
					response: {
						type: 'object'
					},
					singular: {
						type: 'string'
					},
					plural: {
						type: 'string'
					},
					pre: {
						type: 'array',
						items: {
							type: 'string'
						}
					},
					post: {
						type: 'array',
						items: {
							type: 'string'
						}
					},
					nickname: {
						type: 'string'
					},
					key: {
						type: 'string'
					},
					filename: {
						type: 'string'
					},
					timestamp: {
						type: 'string'
					}
				},
				required: ['group', 'path', 'method', 'description', 'enabled']
			};
		}
	}]);

	return API;
}();

exports = module.exports = API;
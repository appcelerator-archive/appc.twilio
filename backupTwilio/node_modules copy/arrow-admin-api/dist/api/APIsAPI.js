'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var APIProvider = require('../APIProvider'),
    API = require('./schema/API'),
    GroupSummary = require('./schema/GroupSummary');

var APIsAPI = function (_APIProvider) {
	_inherits(APIsAPI, _APIProvider);

	function APIsAPI() {
		_classCallCheck(this, APIsAPI);

		return _possibleConstructorReturn(this, (APIsAPI.__proto__ || Object.getPrototypeOf(APIsAPI)).apply(this, arguments));
	}

	_createClass(APIsAPI, null, [{
		key: 'bind',
		value: function bind(controller) {
			var swagger = controller.ctx.swagger;

			swagger.schema('API', API.schema);

			swagger.schema('GroupSummary', GroupSummary.schema);

			/*
   swagger
   	.post('/apis')
   	.operationId('createAPI')
   	.tag('apis')
   	.summary('Create an API.')
   	.body('API', 'The API to create')
   	.response(201, 'Created', 'API')
   	.response(400)
   	.response(500)
   	.action((req, res) => {
   		controller.createAPI(req.body)
   		.then(block => {
   			res.status(201).send(block);
   		})
   		.catch(err => {
   			APIProvider.handleError(err, res, 400, 500);
   		});
   	});
   */
			swagger.get('/apis/summary').operationId('getGroupSummaries').tag('apis').summary('Gets an array of API group summaries').response(200, 'OK', 'GroupSummary', true).response(500).action(function (req, res) {
				controller.getGroupSummaries().then(function (groups) {
					res.status(200).send(groups);
				}).catch(function (err) {
					APIProvider.handleError(err, res, 400, 500);
				});
			});

			swagger.get('/apis/:group').operationId('getEndpoints').tag('apis').summary('Gets an array of Endpoints.').parameter({ in: 'path', name: 'group', type: 'string', description: 'API group to filter by.' }).response(200, 'OK', 'API', true).response(404).response(500).action(function (req, res) {
				var opts = {};

				if (req.params.group) {
					// decode group
					opts.group = decodeURIComponent(req.params.group);
				}

				controller.getEndpoints(opts).then(function (APIs) {
					res.status(200).send(APIs);
				}).catch(function (err) {
					APIProvider.handleError(err, res, 404, 500);
				});
			});

			/*
   swagger
   	.get('/apis/:apiName')
   	.operationId('getAPI')
   	.tag('apis')
   	.summary('Get an API.')
   	.parameter({in: 'path', name: 'apiName', type: 'string', description: 'API name.'})
   	.response(200, 'OK', 'API')
   	.response(404)
   	.response(500)
   	.action((req, res) => {
   		controller.getAPI(req.params.apiName)
   		.then(API => {
   			res.status(200).send(API);
   		})
   		.catch(err => {
   			APIProvider.handleError(err, res, 400, 500);
   		});
   	});
   	swagger
   	.put('/apis/:apiName')
   	.operationId('updateAPI')
   	.tag('apis')
   	.summary('Update an API.')
   	.parameter({in: 'path', name: 'apiName', type: 'string', description: 'API name.'})
   	.body('API', 'The API to update')
   	.response(200, 'Updated', 'API')
   	.response(400)
   	.response(500)
   	.action((req, res) => {
   		try {
   			let API = controller.updateAPI(req.params.apiName, req.body);
   			res.status(200).send(API);
   		}
   		catch (ex) {
   			APIProvider.handleError(ex, res, 400, 500);
   		}
   	});
   	swagger
   	.delete('/apis/:apiName')
   	.operationId('deleteAPI')
   	.tag('apis')
   	.summary('Deletes an API.')
   	.parameter({in: 'path', name: 'apiName', type: 'string', description: 'API name.'})
   	.response(204)
   	.response(400)
   	.response(500)
   	.action((req, res) => {
   		try {
   			controller.deleteAPI(req.params.apiName);
   			res.sendStatus(204);
   		}
   		catch (ex) {
   			APIProvider.handleError(ex, res, 400, 500);
   		}
   	});
   	*/
		}
	}]);

	return APIsAPI;
}(APIProvider);

exports = module.exports = APIsAPI;
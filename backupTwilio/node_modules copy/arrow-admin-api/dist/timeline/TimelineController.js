'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var path = require('path'),
    _ = require('lodash'),
    util = require('../util'),
    Logger = require('appc-logger'),
    Timeline = require('./Timeline');
var NotFoundError = require('../errors/NotFoundError');

// jscs:disable jsDoc

var TimelineController = function () {
	function TimelineController(ctx) {
		_classCallCheck(this, TimelineController);

		this.ctx = ctx;
		this.logdir = Logger.arrowCloudLogDir || path.join(this.ctx.arrow.config.dir || process.cwd(), 'logs');
	}

	_createClass(TimelineController, [{
		key: 'getTimeline',
		value: function getTimeline(eventId) {
			var arrow = this.ctx.arrow;

			return new Promise(function (resolve, reject) {
				var timeline = new Timeline(arrow);
				var reqlog = path.join(this.logdir, 'requests.log');
				var defReqObj = {};

				util.readLogFile(reqlog, function findIt(obj) {
					if (obj.req_id === eventId) {
						defReqObj = obj;
						return true;
					}
					return false;
				}, function () {
					try {
						var logfile = util.getRequestLogPathFromId(this.logdir, eventId);
						util.readLogFile(logfile, timeline.process.bind(timeline), function (err) {
							if (err) {
								reject(err);
								return;
							}

							try {
								var result = timeline.finish();
								if (result && result.req_id) {
									resolve(_.defaults(result, defReqObj));
								} else {
									reject(new NotFoundError(eventId));
								}
							} catch (ex) {
								console.error(ex, ex.stack);
								reject(ex);
							}
						});
					} catch (ex) {
						console.error(ex, ex.stack);
						reject(ex);
					}
				}.bind(this));
			}.bind(this));
		}
	}]);

	return TimelineController;
}();

exports = module.exports = TimelineController;
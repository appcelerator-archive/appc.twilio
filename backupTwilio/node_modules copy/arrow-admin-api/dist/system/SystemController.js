'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var AppC = require('appc-platform-sdk');
var SystemStatus = require('./SystemStatus');

/**
 * The controller implementing the actions for interacting with the System.
 * @public
 */

var SystemController = function () {
	/**
  * Create a SystemController.
  * @param {object} ctx - The context for this controller.
  * @param {express} ctx.app - The express application.
  * @param {string} ctx.prefix - The prefix bound to.
  * @param {Arrow} ctx.arrow - The Arrow server.
  * @param {boolean} ctx.devmode - Flag indicating if this is a devmode server.
  * @param {Swagger} ctx.swagger - openapi-doc instance.
  */
	function SystemController(ctx) {
		_classCallCheck(this, SystemController);

		this.ctx = ctx;
	}

	/**
  * Get the system config.
  * @return {object} config - The system configuration.
  * @return {string} summary.securityServerUrl - The security server URL.
  * @return {string} dateTimeFormat - Datetime format for the logging purpose.
  */


	_createClass(SystemController, [{
		key: 'getConfig',
		value: function getConfig() {
			var _this = this;

			var dateTimeFormat = this.ctx.arrow.config.dateTimeFormat || 'yyyy-mm-dd, HH:MM:ss.l';
			return new Promise(function (resolve) {
				resolve({
					productName: 'API Builder',
					productVersion: _this.ctx.arrow.constructor.Version,
					securityServerUrl: AppC.securityurl,
					dateTimeFormat: dateTimeFormat
				});
			});
		}

		/**
   * Get the system status.
   * @return {SystemStatus} status - Always ok if you get this far.
   */

	}, {
		key: 'getStatus',
		value: function getStatus() {
			return new Promise(function (resolve) {
				resolve(new SystemStatus('ok'));
			});
		}
	}]);

	return SystemController;
}();

exports = module.exports = SystemController;
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Model = function () {
	function Model() {
		_classCallCheck(this, Model);
	}

	_createClass(Model, null, [{
		key: 'validate',
		value: function validate(obj) {
			if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object') {
				return false;
			}
			var valid = true;
			Model.schema.required.forEach(function (prop) {
				if (!obj.hasOwnProperty(prop)) {
					valid = false;
				}
			});
			return valid;
		}
	}, {
		key: 'schema',
		get: function get() {
			return {
				title: 'Model',
				properties: {
					name: {
						type: 'string'
					},
					fields: {
						type: 'object'
					},
					connector: {
						type: 'object',
						properties: {
							name: {
								type: 'string'
							}
						},
						required: ['name']
					},
					metadata: {
						type: 'object'
					},
					autogen: {
						type: 'boolean'
					},
					actions: {
						type: 'array',
						items: {
							type: 'string'
						}
					},
					disabledActions: {
						type: 'array',
						items: {
							type: 'string'
						}
					},
					plural: {
						type: 'string'
					},
					singular: {
						type: 'string'
					},
					cache: {
						type: 'boolean'
					},
					before: {},
					after: {},
					pre: {},
					post: {},
					before$METHOD$: {},
					after$METHOD$: {},
					beforeEvent: {
						type: 'string'
					},
					afterEvent: {
						type: 'string'
					},
					eventTransformer: {},
					before$METHOD$Event: {},
					after$METHOD$Event: {},
					$METHOD$eventTransformer: {},
					documented: {
						type: 'boolean'
					},
					description: {
						type: 'string'
					},
					createDescription: {},
					updateDescription: {},
					deleteDescription: {},
					distinctDescription: {},
					findByIDDescription: {},
					findAndModifyDescription: {},
					findAllDescription: {},
					countDescription: {},
					upsertDescription: {},
					queryDescription: {}
				},
				required: ['fields', 'name']
			};
		}
	}]);

	return Model;
}();

exports = module.exports = Model;
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var APIProvider = require('../APIProvider');
var BadRequestError = require('../errors/BadRequestError');
var Model = require('./Model');

var ModelsAPI = function (_APIProvider) {
	_inherits(ModelsAPI, _APIProvider);

	function ModelsAPI() {
		_classCallCheck(this, ModelsAPI);

		return _possibleConstructorReturn(this, (ModelsAPI.__proto__ || Object.getPrototypeOf(ModelsAPI)).apply(this, arguments));
	}

	_createClass(ModelsAPI, null, [{
		key: 'bind',
		value: function bind(controller) {
			var swagger = controller.ctx.swagger;

			swagger.schema('Model', Model.schema);

			swagger.get('/models').operationId('getModels').tag('model').summary('Gets a list of Arrow Models').response(200, 'OK', 'Model', true).response(500).action(function (req, res) {
				try {
					controller.getModels().then(function (data) {
						res.status(200).send(data);
					}).catch(function (err) {
						APIProvider.handleError(err, res, 500);
					});
				} catch (err) {
					APIProvider.handleError(err, res, 500);
				}
			});

			swagger.post('/models').operationId('createModel').tag('model').summary('Creates a new model').parameter({
				in: 'body',
				name: 'definition',
				schema: {
					// If anyone is wondering, why body.model, I expect that we will
					// eventually need to also support the custom code, and validation
					// functions.
					type: 'object',
					properties: {
						model: {
							$ref: '#/definitions/Model'
						}
					}
				},
				description: 'Arrow Model definition',
				required: true }).response(201).response(400).response(500).action(function (req, res) {
				try {
					var isValid = Model.validate(req.body.model);
					if (isValid) {
						var model = req.body.model;
						controller.createModel(model).then(function (name) {
							res.status(201).send(name);
						}).catch(function (err) {
							APIProvider.handleError(err, res, 400, 500);
						});
					} else {
						APIProvider.handleError(new BadRequestError('Invalid model.'), res, 400, 500);
					}
				} catch (err) {
					APIProvider.handleError(err, res, 400, 500);
				}
			});
		}
	}]);

	return ModelsAPI;
}(APIProvider);

exports = module.exports = ModelsAPI;
// jscs:disable jsDoc

var _ = require('lodash'),
	codegen = require('./code'),
	request = require('./request'),
	result = require('./result'),
	response = require('./response'),
	apitest = require('./apitest'),
	apicontrols = require('./apicontrols'),
	util = require('arrow-util').content;

function generate(object, baseurl, adminurl, context) {
	var pages = [];

	Object.keys(object.apis).forEach(function (name) {
		var api = object.apis[name],
			page = {
				url: util.makeAnchor(name),
				title: name
			},
			markdown = [],
			endpoints = api.endpoints.filter(function (endpoint) {
				if (endpoint.documented !== undefined && !endpoint.documented) {
					return false;
				}
				if (endpoint.enabled !== undefined && !endpoint.enabled) {
					return false;
				}
				return true;
			});

		if (!endpoints.length) {
			return;
		}

		markdown.push('# ' + name + '\n');
		markdown.push(api.description || 'The ' + name + ' API');
		markdown.push(apicontrols.generate(adminurl, name) + '\n');

		_.sortBy(endpoints, 'uiSort').forEach(function (endpoint) {
			var url = baseurl + endpoint.path.replace(/:(\w+)\??/g, function (value) {
						var orig_value = value;
						value = value.substring(1);
						if (/\?$/.test(value)) {
							value = value.substring(0, value.length - 1);
						}
						if (endpoint.result && endpoint.result.type === 'json') {
							var example = endpoint.result.example,
								key = _.without(_.keys(example), 'success', 'id')[0],
								exampleObj = example[key];
							if (exampleObj && value in exampleObj) {
								return exampleObj[value];
							}
						}
						return orig_value;
					}),
				templateurl = baseurl + endpoint.path.replace(/:(\w+)\??/g, function (value) {
						if (/\?$/.test(value)) {
							value = value.substring(0, value.length - 1);
						}
						return value;
					});
			var opts = {
				url: url,
				method: endpoint.method,
				pathParams: {},
				queryParams: {},
				bodyParams: {},
				templateurl: templateurl
			};
			var before_blocks = [],
				after_blocks = [];

			if (endpoint.before) {
				if (_.isString(endpoint.before)) {
					if (!(endpoint.before in context.blocks)) {
						context.blocks[endpoint.before] = [{api: endpoint.name, name: name}];
					} else if (!(endpoint.name in context.blocks[endpoint.before])) {
						context.blocks[endpoint.before].push({api: endpoint.name, name: name});
					}
					before_blocks.push(endpoint.before);
				} else {
					endpoint.before.forEach(function (before) {
						if (!(before in context.blocks)) {
							context.blocks[before] = [{api: endpoint.name, name: name}];
						} else if (!(endpoint.name in context.blocks[before])) {
							context.blocks[before].push({api: endpoint.name, name: name});
						}
						before_blocks.push(before);
					});
				}
			}
			if (endpoint.after) {
				if (_.isString(endpoint.after)) {
					if (!(endpoint.after in context.blocks)) {
						context.blocks[endpoint.after] = [{api: endpoint.name, name: name}];
					} else if (!(endpoint.name in context.blocks[endpoint.after])) {
						context.blocks[endpoint.after].push({api: endpoint.name, name: name});
					}
					after_blocks.push(endpoint.after);
				} else {
					endpoint.after.forEach(function (after) {
						if (!(after in context.blocks)) {
							context.blocks[after] = [{api: endpoint.name, name: name}];
						} else if (!(endpoint.name in context.blocks[after])) {
							context.blocks[after].push({api: endpoint.name, name: name});
						}
						after_blocks.push(after);
					});
				}
			}

			markdown.push('## ' + (endpoint.nickname || endpoint.name) + '\n');

			// generate code
			markdown.push(codegen.generate(object, api, endpoint, opts));

			// reset the example url
			opts.url = templateurl;

			markdown.push(endpoint.description);

			markdown.push(result.generate(object, api, endpoint, opts));
			markdown.push(request.generate(object, api, endpoint, opts));

			// print our before blocks
			if (before_blocks.length) {
				markdown.push('### Before Blocks');
				before_blocks.forEach(function (block, i) {
					var mark = i + 1 < before_blocks.length ? '├─' : '└─';
					markdown.push(mark + ' [' + block + '](docs.html?blocks/' + util.makeAnchor(block) + '.html)');
				});

				markdown.push();
			}

			markdown.push(response.generate(object, api, endpoint, opts));

			// print our after blocks
			if (after_blocks.length) {
				markdown.push('### After Blocks');
				after_blocks.forEach(function (block, i) {
					var mark = i + 1 < after_blocks.length ? '├─' : '└─';
					markdown.push(mark + ' [' + block + '](docs.html?blocks/' + util.makeAnchor(block) + '.html)');
				});
				markdown.push();
			}

			markdown.push(apitest.generate(object, api, endpoint, opts));

			markdown.push('');
		});

		page.markdown = markdown.join('\n');

		pages.push(page);
	});

	return pages;
}

exports.generate = generate;

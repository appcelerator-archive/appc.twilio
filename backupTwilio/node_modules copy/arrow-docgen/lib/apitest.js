// jscs:disable jsDoc

var idCount = 0,
	titles = {
		GET: {
			action: 'Find',
			loading: 'Finding...'
		},
		PUT: {
			action: 'Update',
			loading: 'Updating...'
		},
		POST: {
			action: 'Create',
			loading: 'Creating...'
		},
		DELETE: {
			action: 'Delete',
			loading: 'Deleting...'
		},
		EXECUTE: {
			action: 'Execute',
			loading: 'One moment...'
		}
	};

function generate(object, api, endpoint, opts) {
	if (object.config.env !== 'development') {
		return '';
	}
	var code = [];
	code.push('<h3 class="api-test-heading">API Test</h3>\n');
	code.push('<div class="panel panel-default api-panel"><div class="panel-body form-horizontal">');
	var id = 'api_' + (idCount++);

	function wrapFormGroup(labelWidth, controlWidth, name, control) {
		code.push('<label for="' + id + '_' + name + '" class="col-sm-' + labelWidth + ' text-left">' + name + '</label><div class="col-sm-' + controlWidth + '">' + control + '</div>');
	}

	Object.keys(opts.pathParams).forEach(function (name) {
		wrapFormGroup(2, 4, name, '<input name="' + name + '" id="' + id + '_' + name + '" for-api="' + id + '" type="text" class="api form-control" />');
	});
	Object.keys(opts.queryParams).forEach(function (name) {
		wrapFormGroup(2, 4, name, '<input name="' + name + '" id="' + id + '_' + name + '" for-api="' + id + '" type="text" class="api form-control" />');
	});

	var fieldObj;

	if (/(POST|PUT|DELETE|PATCH)/i.test(endpoint.method)) {
		wrapFormGroup(12, 12, 'body', '<input name="body" replace-with-textarea="true" type="textarea" for-api="' + id + '" class="api form-control" />');
		var model = endpoint.model && object.models[endpoint.model],
			fields = model && model.fields;
		fieldObj = {};
		Object.keys(endpoint.parameters || {}).forEach(function (key) {
			var field = fields && fields[key];
			if (field && field.readonly) {
				return;
			}
			var param = endpoint.parameters[key];
			if (!(key in fieldObj) && !/(query|path)/.test(param.type)) {
				var provideFieldType = function provideFieldType(fieldObj, field, key) {
					var type = (field && field.type) || param.dataType || 'string';

					var subModel;
					if (field && field.model) {
						subModel = field.model;
						if (typeof field.model === 'string' && object.models[field.model]) {
							subModel = object.models[field.model];
						}
					}

					function recurseOnSubModel(into) {
						for (var subField in subModel.fields) {
							if (subModel.fields.hasOwnProperty(subField)) {
								provideFieldType(into, subModel.fields[subField], subField);
							}
						}
					}

					switch (type) {
						case 'boolean':
							fieldObj[key] = false;
							break;
						case 'number':
							fieldObj[key] = 0;
							break;
						case 'array':
							fieldObj[key] = [];
							if (subModel) {
								recurseOnSubModel(fieldObj[key][0] = {});
							}
							break;
						case 'object':
							fieldObj[key] = {};
							if (subModel) {
								recurseOnSubModel(fieldObj[key]);
							}
							break;
						default:
							fieldObj[key] = '';
							break;
					}
				};

				provideFieldType(fieldObj, field, key);
			}
		});
		if (Object.keys(fieldObj).length === 0) {
			fieldObj = null;
		}
	}

	var title = titles[!endpoint.generated ? 'EXECUTE' : endpoint.method.toUpperCase()];
	code.push('<div class="col-sm-12">');
	code.push('<input type="button" ' + 'value="' + title.action + '" ' +
		'data-loading-text="' + title.loading + '" ' + 'id="' + id + '" ' +
		'class="api-button btn btn-primary" model="' +
		(fieldObj ? encodeURIComponent(JSON.stringify(fieldObj, null, '\t')) : '') +
		'" opts="' + encodeURI(JSON.stringify(opts)) + '"/> ');
	if (fieldObj) {
		code.push('<input type="button" ' + 'value="Clear" data-for="' + id + '" ' + 'class="btn api-clear btn-clear" />');
	}
	code.push('</div>');

	code.push('</div></div>');
	return code.join('');
}

exports.generate = generate;

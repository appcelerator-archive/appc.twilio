// jscs:disable jsDoc

var _ = require('lodash'),
	util = require('arrow-util').content;

function generate(object, baseurl, adminurl, context) {
	var pages = [];

	_.keys(object.connectors).forEach(function (name) {
		var page = {
				url: util.makeAnchor(name),
				title: name
			},
			markdown = [];
		var connector = object.connectors[name];
		if (connector.documented !== undefined && !connector.documented) {
			return;
		}
		markdown.push('# ' + name + '\n');
		markdown.push(connector.description || 'This is a connector with no description!');
		markdown.push('');

		try {
			var loadedConnector = require('apibuilder').getConnector(connector.name);
			if (loadedConnector.defaultConfig) {
				markdown.push('\n\t### Connector Default Configuration');
				markdown.push('\n\tThe connector recommends the following configuration. You may need to change some of the below values.');
				markdown.push('\n\t<div style="color: white; margin-left: 1cm; font-family: monospace;">' + loadedConnector.defaultConfig
						.replace(/\t/g, '&nbsp;&nbsp;&nbsp;&nbsp;')
						.replace(/'/g, '&#39;')
						.replace(/"/g, '&#34;')
						.replace(/\n/g, '\n\t') + '</div>');
			}
		}
		catch (e) {
			// Squelch. Doesn't matter...
		}

		var pkg = connector.pkginfo;
		if (pkg) {
			markdown.push('### Connector Details');
			markdown.push('- *Author*: ' + (pkg.author || 'Not specified'));
			markdown.push('- *Version*: ' + (pkg.version || 'Not specified'));
			markdown.push('- *License*: ' + (pkg.license || 'Not specified'));
			markdown.push('');
		}

		var models = context.connectors[name];

		markdown.push('### Models using the ' + name + ' connector');
		if (models && models.length) {
			models.forEach(function (model) {
				markdown.push('- [' + model + '](docs.html?models/' + util.makeAnchor(model) + '.html)');
			});
		} else {
			markdown.push('_No models are using this connector._');
		}

		markdown.push('');

		page.markdown = markdown.join('\n');
		pages.push(page);
	});

	return pages;
}

exports.generate = generate;

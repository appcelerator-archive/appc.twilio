// jscs:disable jsDoc

var _ = require('lodash');

const SPEC = '1';

function Model(arrow, model) {
	this.model = model;
}

function isBuiltinType(o) {
	return (o instanceof Number ||
	o instanceof Object ||
	o instanceof Array ||
	o instanceof String ||
	o instanceof Boolean ||
	o instanceof Date ||
	o instanceof RegExp);
}

Model.prototype.toJSON = function () {
	var fields = {};
	_.keys(this.model.fields).forEach(function (fn) {
		var o = {},
			f = this.model.fields[fn];
		_.keys(f).forEach(function (k) {
			var v = f[k];
			if (_.isFunction(v) && !v.name) {
				var fn = String(v),
					i = fn.indexOf('function ('),
					fnName = k + 'Function';
				if (i === 0) {
					// give it a name
					fn = fn.substring(0, 9) + fnName + ' (' + fn.substring(i + 10);
					v = fn;
				}
			} else if (isBuiltinType(v)) {
				if (!v.name) {
					v = v.source;
				}
				v = v && v.name && v.name.toLowerCase() || String(v);
			} else if (_.isObject(v)) {
				v = String(v);
			}
			o[k] = v;
		});
		o.type = o.type || 'string';
		o.required = !!o.required;
		o.optional = !o.required;
		o.readonly = !!o.readonly;
		o.writeonly = !!o.writeonly;
		o.type = String(o.type.name ? o.type.name : o.type).toLowerCase();
		fields[fn] = o;
	}.bind(this));
	return {
		spec: SPEC,
		kind: 'model',
		documented: this.model.documented,
		generated: this.model.generated,
		_extended: this.model._extended,
		name: this.model.name,
		filename: this.model.filename,
		supermodel: this.model._supermodel,
		plural: this.model.plural,
		singular: this.model.singular,
		description: this.model.description,
		fields: fields,
		connector: this.model.connector && (_.isString(this.model.connector) ? this.model.connector : this.model.connector.name),
		metadata: this.model.metadata,
		actions: this.model.actions,
		autogen: this.model.autogen
	};
};

Model.prototype.inspect = function () {
	return JSON.stringify(this.toJSON(), null, '\t');
};

module.exports = Model;

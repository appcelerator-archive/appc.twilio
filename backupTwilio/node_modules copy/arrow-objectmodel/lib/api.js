// jscs:disable jsDoc

var _ = require('lodash'),
	jsb = require('js-beautify').js_beautify;

const SPEC = '1';

var fnExec = /function\s(.*)?\s?\((.*)\)/;

function API(arrow, api) {
	this.api = api;
}

function trimmer() {
	return function (v) {
		return v.trim();
	};
}

function makeFn(api) {
	var tok = String(api.action).trim().split(/\n/),
		fnparams = fnExec.exec(tok[0]),
		fnbody = jsb(tok.slice(1, tok.length - 1).map(trimmer()).join('\n'), {'indent-size': 4, 'indent-char': '\t'}),
		result = {
			name: fnparams[1] || 'action',
			args: fnparams[2].split(',').map(trimmer()),
			body: fnbody
		};
	return result;
}

API.prototype.toJSON = function () {
	return {
		spec: SPEC,
		kind: 'api',
		documented: this.api.documented,
		uiSort: this.api.uiSort || Number.MAX_VALUE,
		filename: this.api.filename,
		describes: this.api.describes,
		name: this.api.method.toUpperCase() + ' ' + this.api.path,
		description: this.api.description,
		responses: this.api.responses,
		path: this.api.path,
		method: this.api.method,
		model: this.api.model && _.isString(this.api.model) ? this.api.model : this.api.model && this.api.model.name,
		models: this.api.models && this.api.models.map(function (m) {
			return _.isString(m) ? m : m.name;
		}),
		before: _.isString(this.api.before) ? [this.api.before] : this.api.before,
		after: _.isString(this.api.after) ? [this.api.after] : this.api.after,
		response: this.api.response && _.isString(this.api.response) ? this.api.response : this.api.response && this.api.response.name,
		metadata: this.api.metadata,
		parameters: this.api.parameters,
		generated: !!this.api.generated,
		enabled: !!this.api.enabled,
		action: makeFn(this.api),
		nickname: this.api.nickname
	};
};

API.prototype.inspect = function () {
	return JSON.stringify(this.toJSON(), null, '\t');
};

module.exports = API;

<h1 id="heading-arrow-project-overview"><a name="heading-arrow-project-overview">Arrow Project Overview</a></h1><h2 id="heading-core-concepts"><a name="heading-core-concepts">Core Concepts</a></h2><p>An Arrow project can be used to create, deploy and run one or more API endpoints.  An API endpoint consists of the following core building blocks:</p>
<ul>
<li><code>API</code>: The API definition for the endpoint.  API definitions are automatically generated for all Arrow models.  This behavior can be turned off at the model level.  You typically create custom APIs when you need to do something beyond the default capabilities of API endpoints generated from models.    There may also be cases where you will want to create an API endpoint that does not contain a model.</li>
<li><code>Model</code>: The data model for the API endpoint.  Each API has <strong>one</strong> model, but a model can consist of other models or fields from other models.  Once again, Arrow will generate API endpoints for all your models by default.</li>
<li><code>Blocks</code>: Blocks are functions that run before and after an API endpoint is executed.  They can be used to modify the API request, to modify the API response or to execute common tasks like audit logging, caching, rate limiting or recording analytics.  Multiple blocks can be executed before or after an API request.  Blocks are optional.</li>
<li><code>Connectors</code>: Connectors are responsible for reading and writing data to a specific data source (e.g., Salesforce, MySQL, Mongo, Azure MSSQL or your own backend system).  Each model has <strong>one</strong> connector.  There are a number of pre-built connectors in the Platform Marketplace.  You can also create your own custom connectors.</li>
</ul>
<h2 id="heading-directory-structure"><a name="heading-directory-structure">Directory Structure</a></h2><p>Each Arrow project has the following sub-directories:</p>
<ul>
<li><code>apis</code>: Contains all of your API endpoint definitions.  You can define one API endpoint per file.</li>
<li><code>blocks</code>: Contains all of your Block files. Blocks are optional.  You can define one Block per file.</li>
<li><code>conf</code>: Contains the configuration file for your API project including any installed connectors.  Connectors typically have their own configuration file.  For example, if you install the MySQL connector, you will have <code>appc.mysql.default.js</code> in your <code>conf</code> directory.</li>
<li><code>docs</code>: Contains the documentation for your APIs.  The documentation for your project is automatically generated.</li>
<li><code>logs</code>: Contains your log files when running locally.</li>
<li><code>models</code>: Contains your model files. You can define one Model per file.</li>
<li><code>web</code>: Contains all of your files for ArrowWeb.  ArrowWeb allows you to create responsive desktop and mobile web apps that leverage Arrow APIs.</li>
</ul>
<p>In the root directory, you have the following important files:</p>
<ul>
<li><code>app.js</code>: The server bootstrap.  </li>
<li><code>index.js</code>: Used if this project is used as a node module</li>
<li><code>.arrowignore</code>: Used to specify files that should be ignored by Arrow’s auto-restarts, such as <code>web/views/**/*</code>.</li>
</ul>
<h2 id="heading-server-configuration"><a name="heading-server-configuration">Server Configuration</a></h2><p>When you create a project, many sane default configuration properties are created for you. You can change the default<br>configuration by editing <code>conf/default.js</code>.</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>timeout</td>
<td>120000</td>
<td>The number of milliseconds before timing out a request to the server.</td>
</tr>
<tr>
<td>logLevel</td>
<td>debug</td>
<td>Log level of the main logger.</td>
</tr>
<tr>
<td>apiPrefix</td>
<td>/api</td>
<td>The url prefix for your APIs. Everything under this prefix will use whatever authentication strategy you specify in “APIKeyAuthType”.</td>
</tr>
<tr>
<td>admin.prefix</td>
<td>/arrow</td>
<td>The url prefix for the Arrow local administrative UI.</td>
</tr>
<tr>
<td>admin.disableDefault404</td>
<td>false</td>
<td>If set to true, then no default 404 route will be registered. See “Custom 404 Pages” for creating your own.</td>
</tr>
<tr>
<td>port</td>
<td>8080</td>
<td>The port to listen for requests upon. If set to 0, a random port will be used.</td>
</tr>
<tr>
<td>ignoreDuplicateModels</td>
<td>false</td>
<td>Whether or not to error when two models with the same name are detected.</td>
</tr>
<tr>
<td>baseurl</td>
<td></td>
<td>The baseurl to use for this app when it is published in to production. This shouldn’t include the trailing slash. For example: <code>&quot;https://arrow.example.com&quot;</code>.</td>
</tr>
<tr>
<td>pubsub</td>
<td></td>
<td>A dictionary containing your Appcelerator PubSub “key” and “secret”. </td>
</tr>
<tr>
<td>defaultConnector</td>
<td>‘memory’</td>
<td>The connector to use on all models that do not explicitly set a “connector”.</td>
</tr>
<tr>
<td>connectors</td>
<td></td>
<td>A dictionary of defined connector configurations, keyed by name or by alias. See <a href="#heading-configuring-your-connector">Configuring Your Connector</a> below for more information.</td>
</tr>
<tr>
<td>sslInProduction</td>
<td>false</td>
<td>Whether or not to enable an HTTPS server in production. See <a href="#heading-configuring-ssl">Configuring SSL</a> below for more information.</td>
</tr>
<tr>
<td>ssl</td>
<td></td>
<td>A dictionary configuring SSL for your server. See <a href="#heading-configuring-ssl">Configuring SSL</a> below for more information.</td>
</tr>
<tr>
<td>ssl.port</td>
<td>8443</td>
<td>If the <code>ssl</code> config value is provided, this will control the port it will listen for HTTPS traffic on.</td>
</tr>
<tr>
<td>ssl.key</td>
<td></td>
<td>Private key to use for SSL.</td>
</tr>
<tr>
<td>ssl.cert</td>
<td></td>
<td>Public x509 certificate to use.</td>
</tr>
<tr>
<td>ssl.pfx</td>
<td></td>
<td>Certificate, Private key and CA certificates to use for SSL.</td>
</tr>
<tr>
<td>ssl.passphrase</td>
<td></td>
<td>A string of passphrase for the private key or pfx.</td>
</tr>
<tr>
<td>ssl.ca</td>
<td></td>
<td>An authority certificate or array of authority certificates to check the remote host against.</td>
</tr>
</tbody>
</table>
<h2 id="heading-environment-variables"><a name="heading-environment-variables">Environment Variables</a></h2><p>Arrow will automatically restart when you make changes to certain files (which you can configure with your<br>own <code>.arrowignore</code> file). This behavior can be controlled by several environment variables. Set them when running<br>your Arrow project from the command line:</p>
<pre class="highlight bash">APPC_AUTO_RESTART=0 appc run</pre><table>
<thead>
<tr>
<th>Name</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>APPC_AUTO_RESTART</td>
<td>true</td>
<td>Toggles Arrow’s capability to automatically restart on file changes. Set to 0 or false to disable this feature.</td>
</tr>
<tr>
<td>APPC_AUTO_RESTART_COUNT</td>
<td>3</td>
<td>Controls the number of times that Arrow will automatically restart.</td>
</tr>
</tbody>
</table>
<h3 id="heading-configuring-ssl"><a name="heading-configuring-ssl">Configuring SSL</a></h3><p>In order to use HTTPS for your app, you will need to add the following to one of your configuration files:</p>
<pre class="highlight javascript">    sslInProduction: <span class="hljs-literal">true</span>,
    <span class="hljs-attr">ssl</span>: {
        <span class="hljs-attr">port</span>: <span class="hljs-number">8443</span>,
        <span class="hljs-attr">key</span>: fs.readFileSync(<span class="hljs-string">'./agent2-key.pem'</span>), <span class="hljs-comment">// This assumes your key and cert reside in your conf directory.</span>
        cert: fs.readFileSync(<span class="hljs-string">'./agent2-cert.pem'</span>),
        <span class="hljs-comment">// instead of key and cert, you could use a pfx:</span>
        pfx: fs.readFileSync(<span class="hljs-string">'server.pfx'</span>)
    }</pre><p>For more configurations, please refer to the <a href="https://nodejs.org/api/https.html#https_https_createserver_options_requestlistener">NodeJS Documentation on HTTPS</a>.</p>
<p>If you are not in production, but have configured the SSL dictionary, Arrow will listen for HTTPS traffic. But for production, you need to specify <code>sslInProduction: true</code> as well.</p>
<p>Now when you start your server, if everything is configured properly, you will see the following in your logs:</p>
<pre class="highlight bash">INFO  | SSL bound to port 8443</pre><p>Congratulations, your server is now ready for HTTPS traffic!</p>
<h2 id="heading-swagger"><a name="heading-swagger">Swagger</a></h2><p>Arrow can describe its endpoints using the popular <a href="http://swagger.io/">Swagger 2.0 Definition</a>. Simply go to the<br>following URL and you will receive the swagger.json:</p>
<blockquote class="unformat">
<p>curl <a href="http://127.0.0.1:8080/arrow/docs.json">http://127.0.0.1:8080/arrow/docs.json</a></p>

</blockquote><p>You can also limit the returned Swagger doc to just a particular model’s APIs. Go to the API Docs tab in the Arrow UI,<br>click on the “APIs” section in the left menu, and pick a model. Then simply change <code>docs.html</code> to <code>docs.json</code> and you’ll<br>receive the reduced swagger.json! You can also change the .html in the query string to .json, or omit it altogether.</p>
<blockquote class="unformat">
<p>curl <a href="http://127.0.0.1:8080/arrow/docs.json?apis/testuser.html">http://127.0.0.1:8080/arrow/docs.json?apis/testuser.html</a><br>curl <a href="http://127.0.0.1:8080/arrow/docs.json?apis/testuser.json">http://127.0.0.1:8080/arrow/docs.json?apis/testuser.json</a><br>curl <a href="http://127.0.0.1:8080/arrow/docs.json?apis/testuser">http://127.0.0.1:8080/arrow/docs.json?apis/testuser</a></p>

</blockquote><p>Note that in these Swagger examples, you can substitute <code>docs.json</code> with <code>swagger.json</code>.</p>
<h2 id="heading-cors"><a name="heading-cors">CORS</a></h2><p>By default, CORS is enabled in each Arrow project, but you can change the default configuration by editing <code>conf/default.js</code>.</p>
<p>By default, the following CORS headers are enabled:</p>
<ul>
<li>x-requested-with</li>
<li>request-id</li>
<li>response-time</li>
<li>accept</li>
<li>origin</li>
<li>content-type</li>
<li>authorization</li>
<li>x-titanium-id</li>
<li>x-native-id</li>
</ul>
<p>Also, by default <code>Access-Control-Allow-Origin</code> is set to ‘*’ (any client).  </p>
<p>If you wanted to disable <code>x-titanium-id</code>, you should edit <code>conf/default.js</code> and add the following entry:</p>
<pre class="highlight javascript">
cors: {
  <span class="hljs-attr">safeHeaders</span>: [<span class="hljs-string">'x-requested-with'</span>,<span class="hljs-string">'request-id'</span>,<span class="hljs-string">'response-time'</span>,<span class="hljs-string">'accept'</span>,<span class="hljs-string">'origin'</span>,<span class="hljs-string">'content-type'</span>,<span class="hljs-string">'authorization'</span>,<span class="hljs-string">'x-native-id'</span>]
}</pre><p>The <code>safe-headers</code> property should contain the headers that you want enabled.</p>
<p>If you want to set a specific value for <code>Access-Control-Allow-Origin</code>, add the following to <code>conf/default.js</code></p>
<pre class="highlight javascript">cors: {
  <span class="hljs-attr">safeHeaders</span>: [<span class="hljs-string">'x-requested-with'</span>,<span class="hljs-string">'request-id'</span>,<span class="hljs-string">'response-time'</span>,<span class="hljs-string">'accept'</span>,<span class="hljs-string">'origin'</span>,<span class="hljs-string">'content-type'</span>,<span class="hljs-string">'authorization'</span>,<span class="hljs-string">'x-native-id'</span>],
  Access-Control-Allow-Origin:<span class="hljs-string">'http://mysite.com'</span>
}</pre><h2 id="heading-formatters"><a name="heading-formatters">Formatters</a></h2><p>Arrow ships with a number of formatters already installed:</p>
<ul>
<li>JSON</li>
<li>XML</li>
<li>CSV</li>
<li>YAML</li>
<li>Text</li>
<li>JavaScript</li>
</ul>
<p>When accessing the API, if you provide a “Accept” header, the response will be formatted using one of the above.</p>
<p>These formatters can be customized, or new ones can be added.</p>
<h3 id="heading-customizing-the-built-in-json-formatter"><a name="heading-customizing-the-built-in-json-formatter">Customizing the Built-In JSON Formatter</a></h3><p>In your app.js, overwrite the built in formatter as follows:</p>
<pre class="highlight javascript">Arrow.Formation.formatters.json = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">jsonFormatter</span>(<span class="hljs-params">req, resp, body, singular, plural, callback</span>) </span>{
    resp.set(<span class="hljs-string">'Content-Type'</span>, <span class="hljs-string">'application/json'</span>);
    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> body === <span class="hljs-string">'object'</span>) {
        body.customized = <span class="hljs-literal">true</span>;
        callback(<span class="hljs-literal">null</span>, <span class="hljs-built_in">JSON</span>.stringify(body));
    } <span class="hljs-keyword">else</span> {
        callback(<span class="hljs-literal">null</span>, body);
    }
};</pre><p>Now whenever you request a JSON format from the API, it will also inject the <code>&quot;customized&quot;:true</code> property on objects.</p>
<h3 id="heading-adding-a-new-format-type"><a name="heading-adding-a-new-format-type">Adding a New Format Type</a></h3><p>In your app.js, add the new format as follows:</p>
<pre class="highlight javascript">Arrow.Formation.formats.push(<span class="hljs-string">'happy'</span>);
Arrow.Formation.extensions.happy = <span class="hljs-string">'text/happy'</span>;
Arrow.Formation.formatters.happy = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">happyFormatter</span>(<span class="hljs-params">req, resp, body, singular, plural, callback</span>) </span>{
    resp.set(<span class="hljs-string">'Content-Type'</span>, <span class="hljs-string">'text/happy'</span>);
    callback(<span class="hljs-literal">null</span>, <span class="hljs-string">'You look super happy today! Oh, and: '</span> + <span class="hljs-built_in">JSON</span>.stringify(body, <span class="hljs-literal">null</span>, <span class="hljs-string">'\t'</span>));
};</pre><p>Now whenever you request a “text/happy” format from the API, it will follow the “happy” protocol (which has been contrived solely for this demonstration of formatters).</p>

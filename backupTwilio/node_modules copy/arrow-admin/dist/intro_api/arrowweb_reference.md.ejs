<h1 id="heading-arrowweb-reference"><a name="heading-arrowweb-reference">ArrowWeb Reference</a></h1><p>ArrowWeb allows you to easily build responsive desktop and mobile web apps that seamlessly integrate with Arrow APIs and Models.  ArrowWeb can be found in the <code>web</code> directory within the root of your project.  The <code>web</code> directory has three folders:</p>
<ul>
<li><code>public</code>: Contains your public client files (e.g., HMTL, CSS, JavaScript, and images)</li>
<li><code>routes</code>: Contains your ArrowWeb routes.  ArrowWeb Routes allows you to create web endpoints that read and write data using Arrow APIs and Models then leverage one of multiple template engines to render the user interface.  The supported template engines are: <code>handlebars</code>, <code>markdown</code>, <code>ejs</code>, and <code>ReactJS</code>.</li>
<li><code>views</code>: Contains your template files for your template engine.</li>
</ul>
<h2 id="heading-arrow-router"><a name="heading-arrow-router">Arrow Router</a></h2><p>The example below is how you create an Arrow route.  This file should be placed in the <code>web/routes</code> directory of your project.</p>
<pre class="highlight javascript"><span class="hljs-keyword">var</span> Arrow = <span class="hljs-built_in">require</span>(<span class="hljs-string">'arrow'</span>);

<span class="hljs-keyword">var</span> TestRoute = Arrow.Router.extend({
    <span class="hljs-attr">name</span>: <span class="hljs-string">'example'</span>,
    <span class="hljs-attr">path</span>: <span class="hljs-string">'/example'</span>,
    <span class="hljs-attr">method</span>: <span class="hljs-string">'GET'</span>,
    <span class="hljs-attr">description</span>: <span class="hljs-string">'this is an example web route'</span>,
    <span class="hljs-attr">action</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, resp</span>) </span>{
        <span class="hljs-comment">/**
         * by default, routes are sync. to make them async, add a next in the action above as
         * the last parameter and then call next when completed
         */</span>
        resp.render(<span class="hljs-string">'example'</span>);
    }
});

<span class="hljs-built_in">module</span>.exports = TestRoute;</pre><h2 id="heading-arrow-router-properties"><a name="heading-arrow-router-properties">Arrow Router Properties</a></h2><p>The table below outlines the properties supported by Models.</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Required</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>name</td>
<td>true</td>
<td>The name of your route.</td>
</tr>
<tr>
<td>path</td>
<td>true</td>
<td>The endpoint/path for your route</td>
</tr>
<tr>
<td>enabled</td>
<td>false</td>
<td>Whether or not the route is enabled. If not, it won’t be registered, and won’t accept requests.</td>
</tr>
<tr>
<td>sort</td>
<td>false</td>
<td>An integer determining the order in which the routes will be registered. Routes with a higher “sort” value will be prioritized, and will this be registered earlier. For example, say you have /route/:id and /route/foo. If the route with the wildcard has a higher sort than the static route, the static route will never get to run. So create the first with a lower sort, and /route/foo will route properly, as will /api/bar.</td>
</tr>
<tr>
<td>method</td>
<td>true</td>
<td>The method (e.g., GET, POST, etc.)</td>
</tr>
<tr>
<td>description</td>
<td>true</td>
<td>A description for your route.  This is used for documentation purposes.</td>
</tr>
<tr>
<td>action</td>
<td>true</td>
<td>Function that allows you to interact with Arrow APIs and Models and send data to your template engine.</td>
</tr>
</tbody>
</table>
<h2 id="heading-interacting-with-apis"><a name="heading-interacting-with-apis">Interacting with APIs</a></h2><p>You can easily interact with Arrow APIs from your Arrow Web route.  Here’s an example:</p>
<pre class="highlight javascript"><span class="hljs-keyword">var</span> Arrow = <span class="hljs-built_in">require</span>(<span class="hljs-string">'arrow'</span>);

<span class="hljs-keyword">var</span> TestRoute = Arrow.Router.extend({
    <span class="hljs-attr">name</span>: <span class="hljs-string">'car'</span>,
    <span class="hljs-attr">path</span>: <span class="hljs-string">'/car'</span>,
    <span class="hljs-attr">method</span>: <span class="hljs-string">'GET'</span>,
    <span class="hljs-attr">description</span>: <span class="hljs-string">'get some cars'</span>,
    <span class="hljs-attr">action</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, resp, next</span>) </span>{

        req.server.getAPI(<span class="hljs-string">'api/car'</span>, <span class="hljs-string">'GET'</span>).execute({}, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, results</span>) </span>{
            <span class="hljs-keyword">if</span> (err) {
                next(err);
            } <span class="hljs-keyword">else</span> {
                req.log.info(<span class="hljs-string">'got cars '</span> + <span class="hljs-built_in">JSON</span>.stringify(results));
                resp.render(<span class="hljs-string">'car'</span>, results);
            }
        });
    }
});

<span class="hljs-built_in">module</span>.exports = TestRoute;</pre><p>In the example above, our route calls our <code>car</code> API.  You can retrieve a reference to an API by specifying it’s path or its <code>nickname</code> property if specified by the model/API you are using.  Here’s an example:</p>
<pre class="highlight javascript">req.server.getAPI(<span class="hljs-string">'api/car'</span>);</pre><p>This code returns a reference to the <code>car</code> API.  Once you have the API, you just need to call <code>execute</code>:</p>
<pre class="highlight javascript">req.server.getAPI(<span class="hljs-string">'api/car'</span>).execute({}, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, results</span>)</span>{

});</pre><p>This first argument to <code>execute</code> is the input required by your API.  In this example, none are required since we are calling <code>findAll</code>.  The second argument is a callback function.  The first argument in the callback function is an <code>error</code> object, the second is data returned from the API call.</p>
<p>The final part of our example is calling our template with the response data from our API call.</p>
<pre class="highlight javascript">resp.render(<span class="hljs-string">'car'</span>,results);</pre><p>In this example, <code>car</code> references the name of a handlebars template file (<code>car.hbs</code>) and <code>results</code> contains the API response with our array of cars.</p>
<p>Here’s the handlebars template for this example.  It simply iterates through our <code>cars</code>    array.</p>
<pre class="highlight html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>
    {{#each cars}}
        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>{{make}} {{model}} {{year}}<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    {{/each}}
<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></pre><h2 id="heading-interacting-with-models"><a name="heading-interacting-with-models">Interacting with Models</a></h2><p>The previous example showed how to access APIs from a route.  You can also directly access models.  Here’s the previous example modified to use our <code>car</code> model.</p>
<pre class="highlight javascript">ar Arrow = <span class="hljs-built_in">require</span>(<span class="hljs-string">'arrow'</span>);

<span class="hljs-keyword">var</span> TestRoute = Arrow.Router.extend({
    <span class="hljs-attr">name</span>: <span class="hljs-string">'car'</span>,
    <span class="hljs-attr">path</span>: <span class="hljs-string">'/car'</span>,
    <span class="hljs-attr">method</span>: <span class="hljs-string">'GET'</span>,
    <span class="hljs-attr">description</span>: <span class="hljs-string">'get some cars'</span>,
    <span class="hljs-attr">action</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, resp, next</span>) </span>{
        <span class="hljs-keyword">var</span> model = req.server.getModel(<span class="hljs-string">'car'</span>);
        model.findAll(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, results</span>)</span>{
            <span class="hljs-keyword">if</span> (err) {
                next(err);
            } <span class="hljs-keyword">else</span> {
                req.log.info(<span class="hljs-string">'got cars '</span> + <span class="hljs-built_in">JSON</span>.stringify(results));
                resp.render(<span class="hljs-string">'car'</span>, {<span class="hljs-attr">cars</span>:results});
            }

        });
    }
});

<span class="hljs-built_in">module</span>.exports = TestRoute;</pre><p>The first line of the <code>action</code> function retrieves our <code>car</code> model by name:</p>
<pre class="highlight javascript"><span class="hljs-keyword">var</span> model = req.server.getModel(<span class="hljs-string">'car'</span>);</pre><p>The next line calls the <code>findAll</code> function of the model.  It’s important to note that calling APIs is different than calling models.  Calling an API programmatically on the server is nearly identical to calling it remotely - you supply some input parameters and call execute and it returns the API response.  Calling a model programmatically is slightly different.  Since it’s a model, it does not have a REST interface.  Instead, it has the functions that are called underneath the covers when an API is called, so a <code>GET</code> call to an API is the same as a <code>findAll</code> call on the model.  The other difference is in the response data.  The model only returns the data results - hence the results are placed in an object property called <code>car</code>, so my UI template can render it properly.</p>
<p>As you can see, ArrowWeb makes it very easy to build responsive desktop and web apps (using your template engine of choice) that seamlessly integrate with Arrow APIs and Models.</p>
<h2 id="heading-customizing-the-apidocs"><a name="heading-customizing-the-apidocs">Customizing the APIDocs</a></h2><p>You can add your own branding through injected CSS and JS files for the APIDocs (for example, you could customize this page you are reading right now!)</p>
<p>To start off, let’s customize the /apidoc to have our own branding header at the top of each page.</p>
<p>In <code>web/public/app.css</code> write the following:</p>
<pre class="highlight css"><span class="hljs-comment">/* to style only the APIDocs, make sure you prefix
   selectors with body.apidoc! */</span>

<span class="hljs-comment">/* Bump everything down to make room for our banner. */</span>
<span class="hljs-selector-tag">body</span><span class="hljs-selector-class">.apidoc</span> <span class="hljs-selector-id">#nav-secondary</span> <span class="hljs-selector-tag">nav</span>, <span class="hljs-selector-tag">body</span><span class="hljs-selector-class">.apidoc</span> <span class="hljs-selector-id">#page-container</span> {
    <span class="hljs-attribute">top</span>: <span class="hljs-number">50px</span>;
}

<span class="hljs-comment">/* Style our company banner; we'll inject it in the app.js. */</span>
<span class="hljs-selector-tag">body</span><span class="hljs-selector-class">.apidoc</span> <span class="hljs-selector-id">#company-branding</span> {
    <span class="hljs-attribute">background-color</span>: red;
    <span class="hljs-attribute">color</span>: white;
    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">36px</span>;
    <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;
    <span class="hljs-attribute">font-style</span>: italic;
    <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">40px</span>;
}</pre><p>Now in <code>web/public/app.js</code> write the following:</p>
<pre class="highlight javascript">(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
    <span class="hljs-comment">// Make sure we're running in APIDoc.</span>
    <span class="hljs-keyword">if</span> (!$(<span class="hljs-string">'body'</span>).hasClass(<span class="hljs-string">'apidoc'</span>)) {
        <span class="hljs-keyword">return</span>;
    }

    <span class="hljs-comment">// Has our branding been injected yet?</span>
    <span class="hljs-keyword">if</span> ($(<span class="hljs-string">'#company-branding'</span>).length === <span class="hljs-number">0</span>) {
        <span class="hljs-comment">// No? Well, let's do it!</span>
        $(<span class="hljs-string">'body'</span>).prepend(<span class="hljs-string">'&lt;div id="company-branding"&gt;ACME Corporation&lt;/div&gt;'</span>);
    }
})();</pre><p>Now we just need to tell Arrow to use these great new files! Open up your <code>conf/default.js</code> and add these two properties to the <code>admin</code> object:</p>
<pre class="highlight javascript">    admin: {
        ...
        css: [ <span class="hljs-string">'/app.css'</span> ],
        <span class="hljs-attr">js</span>: [ <span class="hljs-string">'/app.js'</span> ]
        ...
    },</pre><p>These two properties can be arrays or CSVs of links to resources. They should either be relative to your web/public/ folder, or be an absolute URL to an external resource.</p>
<p>That’s it! Now restart your server and go to <code>/apidoc/</code> to see it in action (or wherever you have told the APIDocs to live).</p>
<h2 id="heading-custom-404-pages"><a name="heading-custom-404-pages">Custom 404 Pages</a></h2><p>While the Arrow Admin provides a default 404 page, you can create your own for your production app.</p>
<p>You will want to disable the default handler in your configuration:</p>
<pre class="highlight javascript"><span class="hljs-built_in">module</span>.exports = {
    ...
    admin: {
        ...
        disableDefault404: <span class="hljs-literal">true</span>
        ...
    }
    ...
};</pre><p>Then, add the following to your app.js to register the handler:</p>
<pre class="highlight javascript"><span class="hljs-keyword">var</span> Arrow = <span class="hljs-built_in">require</span>(<span class="hljs-string">'arrow'</span>),
    server = <span class="hljs-keyword">new</span> Arrow();

server.on(<span class="hljs-string">'started'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
    server.logger.debug(<span class="hljs-string">'server started!'</span>);

    <span class="hljs-comment">// add a 404 error handler</span>
    server.app.use(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, resp, next</span>) </span>{
        <span class="hljs-keyword">if</span> (!resp.bodyFlushed) {
            resp.status(<span class="hljs-number">404</span>).render(<span class="hljs-string">'404'</span>, {
                <span class="hljs-attr">menuName</span>: <span class="hljs-string">'Not Found'</span>
            });
        }
        next(<span class="hljs-literal">false</span>);
    });

});

<span class="hljs-comment">// start the server</span>
server.start();</pre><p>In the example above, we render a “404” page from <code>web/views/404.md</code>:</p>
<pre class="highlight html"><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>404!<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Oh no, nothing was found! I am so sorry. :(<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></pre><h2 id="heading-custom-500-pages"><a name="heading-custom-500-pages">Custom 500 Pages</a></h2><p>You can render your own custom error handling page by dropping some code in to your app.js:</p>
<pre class="highlight javascript"><span class="hljs-keyword">var</span> Arrow = <span class="hljs-built_in">require</span>(<span class="hljs-string">'arrow'</span>),
    server = <span class="hljs-keyword">new</span> Arrow();

server.on(<span class="hljs-string">'started'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
    server.logger.debug(<span class="hljs-string">'server started!'</span>);

    <span class="hljs-comment">// add a 500 error handler</span>
    app.use(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, req, resp, next</span>) </span>{
        <span class="hljs-keyword">if</span> (!resp.bodyFlushed) {
            server.logger.error(req.originalUrl + <span class="hljs-string">' Failed With '</span> + err.stack);

            app.render(<span class="hljs-string">'500'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, html</span>) </span>{
                resp.status(<span class="hljs-number">500</span>).send(html);
                next(<span class="hljs-literal">false</span>);
            });
        }
    });

});

<span class="hljs-comment">// start the server</span>
server.start();</pre><p>In the example above, we render a “500” page from <code>web/views/500.md</code>:</p>
<pre class="highlight html"><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>500 Error!<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Oh no, something went wrong! I am so sorry. :(<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></pre>
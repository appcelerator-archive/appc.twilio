<h1 id="heading-connector-reference"><a name="heading-connector-reference">Connector Reference</a></h1><p>Connectors are responsible for connecting to a particular data source and reading and writing data from/to it.  Data sources can be anything from SAP to Twitter to a filesystem or a custom REST API in your organization.  You can build connectors to interact with any data source.</p>
<p>Connectors are created as their own project and can be run as such while in development.  This allows the connector developer to build a connector without having to switch to a separate API project while in development.</p>
<p>To create a new connector project, run the following command:</p>
<pre class="highlight shell">appc generate</pre><p>And select the options to create a new connector project.</p>
<p>To run and try out your connector project, run the following command:</p>
<pre class="highlight shell">appc run</pre><p>You can try out your connector in the <code>app.js</code> file.  The main connector file is located in <code>lib/index.js</code>, with stubbed out methods that the connector should export.</p>
<p>The property you should look at first is the <code>capabilities</code>. This defines specific capabilities, like <code>CanRetrieve</code>, or <code>ConnectsToADataSource</code>. By enabling a capability, Arrow will help you add the right methods and configuration to your connector to make it work.</p>
<p>To run unit tests for your connector project, run the following command (<code>npm install</code> is only necessary the first time):</p>
<pre class="highlight shell">npm install
npm test</pre><h2 id="heading-configuring-your-connector"><a name="heading-configuring-your-connector">Configuring Your Connector</a></h2><p>Each connector defines it’s configuration parameters.  This configuration is specified in <code>conf/default.js</code> within your connector project.</p>
<p>By default, the <code>default.js</code> file will be loaded with your main configuration.  To provide a connector specific configuration, use the following format:</p>
<pre class="highlight javascript">{
    <span class="hljs-string">"connectors"</span>: {
        <span class="hljs-string">"name_of_connector_or_alias"</span>: {
            <span class="hljs-string">"connector"</span>: <span class="hljs-string">"real_name"</span>,
            <span class="hljs-string">"config"</span>: {
                <span class="hljs-comment">// connector specific config</span>
            }
        }
    }
}</pre><p>You can alias your connector to provide different connector instances or to easily switch between different configurations.</p>
<p>For example, to use two different Salesforce instances based on the name, you could do the following:</p>
<pre class="highlight javascript">{
    <span class="hljs-string">"connectors"</span>: {
        <span class="hljs-string">"sf_production"</span>: {
            <span class="hljs-string">"connector"</span>: <span class="hljs-string">"appc.salesforce"</span>,
            <span class="hljs-string">"config"</span>: {
                <span class="hljs-comment">// connector specific config</span>
            }
        },
        <span class="hljs-string">"sf_development"</span>: {
            <span class="hljs-string">"connector"</span>: <span class="hljs-string">"appc.salesforce"</span>,
            <span class="hljs-string">"config"</span>: {
                <span class="hljs-comment">// connector specific config</span>
            }
        }
    }
}</pre><p>This type of configuration allows models to easily change from a development or production version of the same connector.</p>
<h2 id="heading-generate-connector-endpoints"><a name="heading-generate-connector-endpoints">Generate Connector Endpoints</a></h2><p>API endpoints can be generated from a connector’s model (if the connector supports models).  For example, if your MySQL connector points to a database with a single table: employee.  It will automatically generate a model definition for the employee table - hence the ability to extend or reduce a MySQL model by name in this manner: <strong>appc.mysql/employee</strong>.  Additionally, you can generate API endpoints from connector models (when supported by the connector).  To set this property for Salesforce (as an example), go to the <code>conf</code> directory and open <code>appc.salesforce.default.js</code> - this is the default configuration for the Salesforce connector.  This configuration file is created when you install the Salesforce connector into your project.</p>
<p>Here’s an example of a Salesforce connector’s configuration (found in <strong>conf/appc.salesforce.default.js</strong>)</p>
<pre class="highlight javascript"><span class="hljs-built_in">module</span>.exports = {
    <span class="hljs-string">"connectors"</span>: {
        <span class="hljs-string">"appc.salesforce"</span>: {
            <span class="hljs-string">"modelAutogen"</span>:<span class="hljs-literal">false</span>,
            <span class="hljs-string">"requireSessionLogin"</span>: <span class="hljs-literal">false</span>,
            <span class="hljs-string">"url"</span>: <span class="hljs-string">'https://test.salesforce.com/'</span>,
            <span class="hljs-string">"username"</span>: <span class="hljs-string">'myemail@mydomain.com'</span>,
            <span class="hljs-string">"password"</span>: <span class="hljs-string">'mypassword'</span>,
            <span class="hljs-string">"token"</span>: <span class="hljs-string">'mytoken'</span>
        }
    }
};</pre><p>The property <code>modelAutogen</code> controls whether API endpoints are generated.  The default is <code>false</code>, which means API endpoints will not be generated.</p>

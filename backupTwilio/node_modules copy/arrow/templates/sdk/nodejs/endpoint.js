function method({{#args}}{{.}}, {{/args}}callback, options) {
		var SDK = require('../index');

		{{#hasQueryAndBody}}
		if (SDK.isFunction(query)) {
			callback = query;
			query = {};
			body = {};
		}
		else if (SDK.isFunction(body)) {
			callback = body;
			body = {};
		}
		{{/hasQueryAndBody}}
		{{^hasQueryAndBody}}
		{{#hasQuery}}
		if (SDK.isFunction(query)) {
			callback = query;
			query = {};
		}
		{{/hasQuery}}
		{{#hasBody}}
		if (SDK.isFunction(body)) {
			callback = body;
			body = {};
		}
		{{/hasBody}}
		{{/hasQueryAndBody}}

		var url = SDK.getURL('{{&path}}');
		{{#pathParams}}
		url = url.replace(':{{&.}}', {{&.}});
		{{/pathParams}}
		{{#hasQuery}}
		if (query) {
			url = SDK.appendQuery(url, query);
		}
		{{/hasQuery}}
	
		{{> readCache.js}}

		var client = SDK.constructHTTP('{{method}}', url, onLoad{{#hasBody}}, body{{/hasBody}});

		function onLoad(error, response, body) {
			if (!callback) {
				return;
			}
			if (error) {
				{{> readCacheOnError.js}}
				callback(error, null, response);
				clean();
				return;
			}
			if (response.statusCode >= 200 && response.statusCode <= 299) {
				if (body && body.key && body[body.key] !== undefined) {
					body = body[body.key];
				}
				{{> writeCache.js}}
				callback(null, body, client);
			}
			else {
				callback(body, null, client);
			}
			clean();
		}

		function clean() {
			{{#args}}{{.}} = {{/args}}callback = url = client = null;
		}
	}
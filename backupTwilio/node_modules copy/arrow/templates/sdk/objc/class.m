{{#models}}
/** filename: {{&sdknameLower}}/{{&safeName}}.m **/
#import "{{&safeName}}.h"

@implementation {{&safeName}}

static CachePolicy _cachePolicyType;
static NSNumber *_cachePolicyDuration;

+ (CachePolicy)cachePolicyType {
    @synchronized(self) { return _cachePolicyType; }
}
+ (void)setCachePolicyType:(CachePolicy)value {
    @synchronized(self) { _cachePolicyType = value; }
}

+ (NSNumber *)cachePolicyDuration {
    @synchronized(self) {
        return _cachePolicyDuration;
    }
}

+ (void)setCachePolicyDuration:(NSNumber *)value {
    @synchronized(self) { _cachePolicyDuration = value; }
}

+({{&safeName}} *)parse:(NSDictionary *)object {
    {{&safeName}} *retVal = [[{{&safeName}} alloc] init];
    {{#fields}}
    id {{safeName}} = [object valueForKey:@"{{name}}"];
    if ({{safeName}} != nil) {
        retVal.{{safeName}} = ({{type}}){{safeName}};
    }
    {{/fields}}
    return retVal;
}

{{#endpoints}}

{{> class.endpoint.sig.m }}
{
    [self {{&describes}}:{{#argNames}}{{&.}} with:{{/argNames}}_cachePolicyType with:callback];
}

{{> class.endpoint.sig.cachePolicy.m }}
{
    NSString *url = [{{&sdkname}} getURL:@"{{&path}}"];
    {{#pathParams}}
    url = [url stringByReplacingOccurrencesOfString:@":{{&.}}" withString:{{&.}}];
    {{/pathParams}}
    {{&sdkname}}API *api = [[{{&sdkname}}API alloc] init:url withMethod:@"{{method}}"];
    [api setCachePolicyType:cachePolicyType];
    [api setCachePolicyDuration:_cachePolicyDuration];
    {{> class.construct.options.m}}

    [api execute:options with:^(NSError *error, NSDictionary *result, NSHTTPURLResponse *response) {
        {{> class.handle.result.m}}
    }];
}

{{/endpoints}}

@end
{{/models}}
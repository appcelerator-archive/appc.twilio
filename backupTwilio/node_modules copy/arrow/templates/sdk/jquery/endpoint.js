function method({{#args}}{{.}}, {{/args}}callback, options) {
					{{#hasQueryAndBody}}
					if (isFunction(query)) {
						callback = query;
						query = {};
						body = {};
					}
					else if (isFunction(body)) {
						callback = body;
						body = {};
					}
					{{/hasQueryAndBody}}
					{{^hasQueryAndBody}}
					{{#hasQuery}}
					if (isFunction(query)) {
						callback = query;
						query = {};
					}
					{{/hasQuery}}
					{{#hasBody}}
					if (isFunction(body)) {
						callback = body;
						body = {};
					}
					{{/hasBody}}
					{{/hasQueryAndBody}}

					var url = getURL('{{&path}}');
					{{#pathParams}}
					url = url.replace(':{{&.}}', {{&.}});
					{{/pathParams}}
					{{#hasQuery}}
					if (query) {
						url = appendQuery(url, query);
					}
					{{/hasQuery}}

					{{> readCache.js}}

					var client = $.ajax({
						url: url,
						method: '{{method}}',
						{{#hasBody}}
						data: body,
						{{/hasBody}}
						headers: config.headers,
						timeout: config.timeout,
						success: onSuccess,
						error: onError
					});

					function onSuccess(body, textStatus, jqXHR) {
						if (!callback) {
							return;
						}
						if (jqXHR.status >= 200 && jqXHR.status <= 299) {
							if (body && body.key && body[body.key] !== undefined) {
								body = body[body.key];
							}
							{{> writeCache.js}}
							callback(null, body, client);
						}
						else {
							callback(body, null, client);
						}
						clean();
					}

					function onError(jqXHR, textStatus, errorThrown) {
						if (!callback) {
							return;
						}
						{{> readCacheOnError.js}}
						callback(errorThrown, null, client);
						clean();
					}

					function clean() {
						{{#args}}{{.}} = {{/args}}callback = url = client = null;
					}
				}
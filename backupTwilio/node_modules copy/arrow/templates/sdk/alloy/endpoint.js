function _{{&describes}}({{#args}}{{.}}, {{/args}}callback, options) {
	{{#hasQueryAndBody}}
	if (_.isFunction(query)) {
		callback = query;
		query = {};
		body = {};
	}
	else if (_.isFunction(body)) {
		callback = body;
		body = {};
	}
	{{/hasQueryAndBody}}
	{{^hasQueryAndBody}}
	{{#hasQuery}}
	if (_.isFunction(query)) {
		callback = query;
		query = {};
	}
	{{/hasQuery}}
	{{#hasBody}}
	if (_.isFunction(body)) {
		callback = body;
		body = {};
	}
	{{/hasBody}}
	{{/hasQueryAndBody}}

	var url = SDK.getURL('{{&path}}');
	{{#pathParams}}
	url = url.replace(':{{&.}}', {{&.}});
	{{/pathParams}}
	{{#hasQuery}}
	if (query) {
		url = SDK.appendQuery(url, query);
	}
	{{/hasQuery}}

	{{> readCache.js}}

	var client = SDK.constructHTTP('{{method}}', url, onLoad, onError);
	{{#hasBody}}
	client.send(body);
	{{/hasBody}}
	{{^hasBody}}
	client.send();
	{{/hasBody}}

	function onLoad() {
		if (!callback) {
			return;
		}
		var body = this.responseText;
		if (/^application\/(.*\\+)?json/.test(this.getResponseHeader('Content-Type'))) {
			try {
				body = JSON.parse(body);
				if (body.key && body[body.key] !== undefined) {
					body = body[body.key];
				}
			}
			catch (e) {
				console.error('Failed to parse the body from the server:');
				console.error(body);
				console.error(e);
			}
		}
		if (this.status >= 200 && this.status <= 299) {
			{{> writeCache.js}}
			callback(null, body, client);
		}
		else {
			callback(body, null, client);
		}
		clean();
	}

	function onError(e) {
		if (!callback) {
			return;
		}
		{{> readCacheOnError.js}}
		callback(e.error, null, client);
		clean();
	}

	function clean() {
		{{#args}}{{.}} = {{/args}}callback = url = client = null;
	}
}
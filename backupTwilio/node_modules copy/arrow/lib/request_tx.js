/**
 * This code is closed source and Confidential and Proprietary to
 * Appcelerator, Inc. All Rights Reserved.  This code MUST not be
 * modified, copied or otherwise redistributed without express
 * written permission of Appcelerator. This file is licensed as
 * part of the Appcelerator Platform and governed under the terms
 * of the Appcelerator license agreement.
 */
var _ = require('lodash');

// jscs:disable jsDoc

var TypeRegEx = /(api|action|pre|post|model|connector|router)\:(.*)/;

function RequestTx(req, resp) {
	this.req = req;
	this.resp = resp;
	this.tx = {};
	this.log = req.log;
	this.logs = [];
	this.timers = [];
	this.started = Date.now();
}

RequestTx.prototype.pushLog = function (log) {
	this.logs.push(log);
	this.req.log = log;
};

RequestTx.prototype.popLog = function () {
	if (this.logs.length && this.req) {
		this.logs.length = this.logs.length - 1;
		this.req.log = this.logs[this.logs.length - 1] || this.log;
	}
};

function decodeName(name) {
	var subname = name,
		type = 'server';
	if (TypeRegEx.test(name)) {
		var match = TypeRegEx.exec(name);
		type = match[1];
		if (type === 'pre' || type === 'post') {
			type = 'block';
		}
		var tokens = name.split(':');
		subname = tokens[tokens.length - 1];
	}
	return {
		name: name,
		type: type,
		subname: subname
	};
}

function TxContext(rtx, name, filename, description, metadata) {
	this.rtx = rtx;
	this.started = Date.now();
	this.key = name;
	var _name = decodeName(name);
	this.name = _name.name;
	this.type = _name.type;
	this.subname = _name.subname;
	this.metadata = metadata;

	var log = rtx.log.child({
		type: 'transaction',
		tx_filename: filename,
		tx_description: description,
		tx_name: this.name,
		tx_subname: this.subname,
		tx_type: this.type,
		tx_metadata: metadata
	}, true);
	rtx.pushLog(log);
	this.log = log;
}

TxContext.prototype.addArguments = function (args) {
	this._args = args;
};

TxContext.prototype.addResult = function (result) {
	this._result = result;
};

TxContext.prototype.addError = function (error) {
	if (error && error.stack) {
		this._error = String(error.stack);
	} else {
		this._error = error;
	}
};

TxContext.prototype.end = function () {
	if (this.log) {
		this.log.info({ignore: true, _error: this._error, _result: this._result, _args: this._args});
	}
	this.ended = Date.now();
	if (this.rtx) {
		this.rtx.popLog();
		this.rtx.end(this.key);
	}
};

RequestTx.prototype.start = function (name, dontadd, filename, description, metadata) {
	var tx = new TxContext(this, name, filename, description, metadata);
	this.timers.push(tx);
	this.tx[name] = tx;
	return tx;
};

RequestTx.prototype.end = function (name) {
	if (this.tx) {
		this.tx[name] = null;
	}
};

RequestTx.prototype.done = function () {
	if (this._done || !this.log) {
		return;
	}
	this._done = true;

	var ended = Date.now(),
		timeline = [],
		apiDuration = 0;

	timeline.push({
		type: 'server',
		started: this.started,
		ended: ended
	});

	this.timers.forEach(function (tx) {
		var entry = {
			name: tx.name,
			subname: tx.subname,
			type: tx.type,
			started: tx.started,
			ended: tx.ended || tx.started
		};
		timeline[timeline.length - 1].duration = tx.started - timeline[timeline.length - 1].started;
		timeline.push(entry);
	});

	timeline[timeline.length - 1].duration = ended - timeline[timeline.length - 1].started;

	for (var c = 1; c < timeline.length - 2; c++) {
		apiDuration += timeline[c].duration;
	}

	var beginServerDuration = timeline[0].duration,
		endServerDuration = ended - timeline[timeline.length - 1].ended,
		totalDuration = beginServerDuration + endServerDuration + apiDuration;

	var record = {
		ignore: true,
		type: 'timeline',
		timeline: timeline.slice(1),
		totalDuration: totalDuration,
		apiDuration: apiDuration,
		beginServerDuration: beginServerDuration,
		endServerDuration: totalDuration - endServerDuration - beginServerDuration
	};

	this.req.duration = totalDuration;

	this.log.info(record);

	this.req = null;
	this.resp = null;
	this.tx = null;
};

module.exports = RequestTx;

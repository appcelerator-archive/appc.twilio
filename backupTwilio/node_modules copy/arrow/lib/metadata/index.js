/**
 * This code is closed source and Confidential and Proprietary to
 * Appcelerator, Inc. All Rights Reserved.  This code MUST not be
 * modified, copied or otherwise redistributed without express
 * written permission of Appcelerator. This file is licensed as
 * part of the Appcelerator Platform and governed under the terms
 * of the Appcelerator license agreement.
 */
var fs = require('fs'),
	path = require('path'),
	obj = {};

// jscs:disable jsDoc

/**
 * Reads through the child files and loads them as fields.
 */
fs.readdirSync(__dirname).forEach(function (name) {
	var fn = path.basename(name);
	if (/\.js$/.test(fn) && fn !== 'index.js') {
		var m = require('./' + name);
		obj[m.name] = function () {
			var result = m.apply(m, arguments);
			return toField(result);
		};
	}
});

/**
 * Converts the provided object in to a field, setting some default properties.
 * @param obj
 * @returns {*|{}}
 */
function toField(obj) {
	obj = obj || {};
	Object.keys(obj).forEach(function (key) {
		var value = obj[key],
			type = typeof(value);
		if (type === 'function') {
			delete obj[key];
		} else if (value instanceof RegExp) {
			var flags = '';
			value.ignoreCase && (flags += 'i');
			value.global && (flags += 'g');
			value.multiline && (flags += 'm');
			obj[key] = {
				value: value.source,
				flags: flags,
				type: 'regexp'
			};
		}
	});
	return obj;
}

exports = module.exports = obj;

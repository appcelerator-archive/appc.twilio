// jscs:disable
/**
 * @class MarkdownRendererEngine
 * Renderer engine for Markdown templates.
 * @extends ArrowRendererEngine
 * @pseudo
 */

/**
 * @property skipread
 * @hide
 */
// jscs:enable
var marked = require('appc-marked'),
	fs = require('fs'),
	renderer = new marked.Renderer(),
	highlight = require('highlight.js'),
	util = require('./util'),
	langJS = /^(javascript|js|node|node\.js|nodejs|node\-js|js|web|titanium|ti)$/i,
	looksLikeJS = /(var|function|require|undefined|typeof)/,
	options = {
		renderer: renderer,
		gfm: true,
		tables: true,
		breaks: false,
		pedantic: false,
		sanitize: true,
		smartLists: true,
		smartypants: false
	};

// jscs:disable jsDoc

exports.extension = 'md';
/**
 * @property {Object} marked
 * marked module instance to access its APIs.
 */
exports.marked = marked;
/**
 * @property {Object} renderer
 * renderer module instance to access its APIs.
 */
exports.renderer = renderer;

// special code handler that does highlight.js automatically
renderer.code = function (value, lang) {
	if (!lang) {
		if (looksLikeJS.test(value)) {
			// if it sort of loosely looks like JS code, let's be a little more lenient and pass it in
			// since devs will often forget to use the language on ```
			lang = 'javascript';
		} else {
			return '<blockquote class="unformat">\n' + marked(value) + '\n</blockquote>';
		}
	}
	lang = lang && lang.replace(/\./g, '-');
	var html = '<pre class="highlight ' + lang + ' code"><code>',
		result;
	if (langJS.test(lang)) {
		result = highlight.highlight('javascript', value).value;
	}  else if (lang && highlight.getLanguage(lang)) {
		// see if we can look up the language by the name
		// and if found, don't auto-detect since it's too slow
		result = highlight.highlight(lang, value).value;
	} else {
		// worse case, we can fall back to auto detection
		result = highlight.highlightAuto(value).value;
	}
	html += result;
	html += '</code></pre>';
	return html;
};

function makeAnchor(text) {
	return text.toLowerCase().replace(/[^\w]+/g, '-');
}

renderer.heading = function (text, level) {
	var escapedText = makeAnchor(text);
	return '<h' + level + ' id="heading-' + escapedText + '"><a name="heading-' + escapedText + '">' + text + '</a></h' + level + '>';
};

function render(app, filename, opts) {
	filename = util.resolveLayoutFilename(app, filename);
	return marked(fs.readFileSync(filename).toString(), options);
}

exports.createRenderer = function (content, filename, app) {
	var tpl = marked(content, options);
	return function (filePath, opts, callback) {
		util.render(app, tpl, opts, exports.extension, render, callback);
	};
};

// jscs:disable
/**
 * @class ReactRendererEngine
 * Renderer engine for React templates.
 * @extends ArrowRendererEngine
 * @pseudo
 */
// jscs:enable

var react = require('react'),
	reactDom = require('react-dom/server'),
	path = require('path'),
	babelRegister,
	Module = require('module'),
	registeredPaths = {};

// jscs:disable jsDoc

exports.extension = 'jsx';
exports.skipread = true;

/**
 * @property {Object} engine
 * engine module instance to access its APIs.
 */
exports.engine = function renderFile(filename, options, cb) {
	if (!babelRegister) {
		babelRegister = require('babel/register');
	}
	// Defer babel registration until the first request so we can grab the view path.
	var markup,
		component,
		viewsPath = options.settings.views,
		moduleDetectRegEx = new RegExp('^' + viewsPath);

	if (!registeredPaths[viewsPath]) {
		babelRegister({only: viewsPath});
		registeredPaths[viewsPath] = true;
	}

	try {
		markup = '<!DOCTYPE html>';
		component = require(filename);

		// Transpiled ES6 may export components as { default: Component }
		component = component.default || component;

		markup += reactDom.renderToStaticMarkup(react.createElement(component, options));
	} catch (e) {
		return cb(e);
	}

	if (options.settings.env === 'development') {
		// Remove all files from the module cache that are in the view folder.
		Object.keys(require.cache).forEach(function (module) {
			if (moduleDetectRegEx.test(require.cache[module].filename)) {
				delete require.cache[module];
			}
		});
	}

	cb(null, markup);
}
;
/**
 * @property {Object} react
 * react module instance to access its APIs.
 */
exports.react = react;

exports.createRenderer = function (content, filename, callback) {
	return function (content, filename, callback) {
		callEngine(exports.engine, arguments);
	};
};

/**
 * call using special module loader to get the correct handle to react
 */
function callEngine(fn, args) {
	var previousWrapper = Module.wrapper[0];
	// inject our special require() handler that modifies the module search paths
	// and then invokes the original require()
	// NOTE: the wrapper MUST be on a single line
	Module.wrapper[0] = previousWrapper + ';' +
		'(function (_require, p) {' +
			/*  */'require = function (name) {' +
			/*     */'if (name==="react") {' +
			/*        */'return global.__react;' +
			/*     */'}' +
			/*     */'module.paths.indexOf(p) === -1 && module.paths.unshift(p);' +
			/*     */'return _require(name);' +
			/*  */'};' +
			/*  */'for (var n in _require) {' +
			/*     */'require[n] = _require[n];' +
			/*  */'}' +
		'})(require, "' + path.resolve(__dirname, '..', '..').replace(/"/g, '\"') + '");';

	try {
		global.__react = react;
		fn.apply(exports.engine, args);
	} finally {
		// undo monkey patch
		Module.wrapper[0] = previousWrapper;
		delete global.__react;
	}
}

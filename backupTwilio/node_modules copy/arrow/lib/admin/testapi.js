/**
 * This code is closed source and Confidential and Proprietary to
 * Appcelerator, Inc. All Rights Reserved.  This code MUST not be
 * modified, copied or otherwise redistributed without express
 * written permission of Appcelerator. This file is licensed as
 * part of the Appcelerator Platform and governed under the terms
 * of the Appcelerator license agreement.
 */
var _ = require('lodash'),
	request = require('request'),
	util = require('./util'),
	highlight = require('highlight.js');

// jscs:disable jsDoc

const fields = ['httpVersion', 'headers', 'url', 'statusCode'];

function configure(app, prefix, arrow, devmode) {
	var enableAdminInProduction = arrow.config.admin && arrow.config.admin.enableAdminInProduction;
	if (!devmode && !enableAdminInProduction) {
		return;
	}
	app.post(prefix + '/testapi', function serveTestAPI(req, res, next) {
		if (!devmode && !util.isLoggedIn(req, arrow.config.session.secret)) {
			util.unauthorized(res);
			return next(false);
		}
		var body = req.body,
			opts = {};

		opts.method = body.method || 'GET';
		opts.url = body.url;
		opts.headers = {
			cookie: req.headers.cookie
		};
		body.body && (opts.body = body.body);

		if (body.accepts) {
			opts.headers.accept = body.accepts;
		}

		opts.followRedirect = body.redirects === 'on';
		opts.followAllRedirects = body.redirects === 'on';

		opts.gzip = body.uncompress === 'on';

		// add our authentication as required by the authentication plugin
		if (arrow.authstrategy) {
			arrow.authstrategy.applyCredentialsForTest(opts);
		}

		if (body['content-type']) {
			opts.headers['Content-Type'] = body['content-type'];
		}
		if (typeof opts.body === 'object') {
			opts.json = opts.body;
			delete opts.body;
		}

		if ('header-name' in body) {
			var names = body['header-name'],
				values = body['header-value'];
			if (Array.isArray(names)) {
				names.forEach(function (name, index) {
					opts.headers[name] = values[index];
				});
			} else {
				opts.headers[names] = values;
			}
		}

		if (!('user-agent' in opts.headers) && !('User-Agent' in opts.headers)) {
			opts.headers['User-Agent'] = body.user_agent || 'Appcelerator API Tester/1.0';
		}

		var ts = Date.now();
		// console.log(opts);

		request(opts, function testAPIProxy(err, response, body) {
			var duration = Date.now() - ts;

			// allow the auth plugin to handle the response too and potentially change it
			if (arrow.authstrategy) {
				body = arrow.authstrategy.applyResponseForTest(response, body);
			}

			if (body && response && response.headers && 'content-type' in response.headers && typeof(body) === 'string') {
				var ct = response.headers['content-type'];
				if (ct && ct.indexOf('/json') > 0) {
					// we are going to pretty-print JSON
					try {
						body = JSON.stringify(JSON.parse(body), null, 2);
					}
					catch (E) {
					}
				}
			} else if (body && typeof(body) === 'object') {
				body = JSON.stringify(body, null, 2);
			}
			var hl;
			try {
				hl = body && highlight.highlightAuto(body);
			}
			catch (E) {
				// skip highlighting errors
				hl = null;
			}
			res.json({
				success: !err || (response && response.statusCode >= 202),
				response: _.pick(response, fields),
				body: body,
				body_html: hl && hl.value,
				body_lang: hl && hl.language,
				responseTime: duration,
				responseSize: (body && body.length) || 0
			});
			if (req.cleanStream) {
				req.cleanStream();
			}
		});
	});
}

exports.configure = configure;

/**
 * This code is closed source and Confidential and Proprietary to
 * Appcelerator, Inc. All Rights Reserved.  This code MUST not be
 * modified, copied or otherwise redistributed without express
 * written permission of Appcelerator. This file is licensed as
 * part of the Appcelerator Platform and governed under the terms
 * of the Appcelerator license agreement.
 */
var fs = require('fs'),
	path = require('path'),
	http = require('http'),
	readline = require('readline'),
	_ = require('lodash'),
	Logger = require('appc-logger'),
	highlight = require('highlight.js'),
	devnull = require('dev-null');

// jscs:disable jsDoc

var standardHTTPHeaders = ['host', 'connection', 'accept', 'authorization', 'cookie', 'date', 'from', 'origin', 'referer', 'via', 'upgrade', 'expect', 'age', 'allow', 'location', 'server', 'vary'];
var customHTTPHeaders = {
	'apikey': 'APIKey'
};

function tokenize(line) {
	var tokens = line.split('-');
	if (tokens.length > 1) {
		return tokens.map(function (t) {
			return t.charAt(0).toUpperCase() + t.substring(1);
		}).join('-');
	} else {
		if (standardHTTPHeaders.indexOf(line) !== -1) {
			return line.charAt(0).toUpperCase() + line.substring(1);
		}
		return customHTTPHeaders[line] || line;
	}
}

function generateHeaders(headers) {
	var lines = [];
	_.keys(headers).forEach(function (k) {
		lines.push(tokenize(k) + ': ' + headers[k]);
	});
	return lines.join('\n');
}

function readLogFile(reqlog, lineCallback, doneCallback) {
	if (!fs.existsSync(reqlog)) {
		return doneCallback();
	}
	var instream = fs.createReadStream(reqlog),
		rl = readline.createInterface({input: instream, output: devnull()});
	rl.setPrompt('');
	rl.on('line', function (line) {
		try {
			if (lineCallback(JSON.parse(line))) {
				instream.pause();
				try {
					instream.close();
				}
				catch (E) {
				}
			}
		}
		catch (E) {
			console.error('Error reading', reqlog);
			console.error(E.stack);
			doneCallback(E);
		}
	});
	instream.on('close', doneCallback);
}

function statusMessage(code) {
	return http.STATUS_CODES[String(code)];
}

function formatLogLevel(level) {
	switch (level) {
		case Logger.TRACE:
			return '[TRACE]';
		case Logger.DEBUG:
			return '[DEBUG]';
		case Logger.INFO:
			return '[INFO]';
		case Logger.WARN:
			return '[WARN]';
		case Logger.ERROR:
			return '[ERROR]';
		case Logger.FATAL:
			return '[FATAL]';
		default:
			return '';
	}
}

function formatLogMessage(obj) {
	return formatLogLevel(obj.level) + ' ' + obj.msg;
}

// A JSON stringifier that handles cycles safely.
// Usage: JSON.stringify(obj, safeCycles())
function safeCycles() {
	var seen = [];
	return function (key, val) {
		if (!val || typeof (val) !== 'object') {
			return val;
		}
		if (seen.indexOf(val) !== -1) {
			return '[Circular]';
		}
		seen.push(val);
		return val;
	};
}

function cleanupLog(logs) {
	// get rid of logs that are just an empty first INFO line and nothing else
	if (logs && logs.length) {
		var first = _.first(logs);
		if (first && /^\[INFO\]\s+$/.test(first)) {
			logs = logs.splice(1);
		}
	}
	return logs;
}

function getSafeReqId(req) {
	return (req.params.id || req._params.id || '').replace(/[\\\.]/g, '');
}

function getRequestLogPath(dir, req) {
	var safeid = 'request-' + getSafeReqId(req);
	return path.join(dir, safeid + '.log');
}

function formatBody(body, lang) {
	// if already formatted, don't double format and just return
	if (body && /^<span\s/.test(body)) {
		return body;
	}
	if (_.isObject(body)) {
		body = JSON.stringify(body, null, 2);
	} else if (_.isString(body) && /^[{\[]/.test(body)) {
		try {
			body = JSON.stringify(JSON.parse(body), null, 2);
		}
		catch (E) {
		}
	}
	return highlighter(body || '<empty>', lang);
}

function ucfirst(value) {
	return value && (value.charAt(0).toUpperCase() + value.substring(1));
}

function unauthorized(res) {
	res.sendStatus(401);
}

function highlighter(body, lang) {
	return lang ? highlight.highlight(lang, body || '').value : highlight.highlightAuto(body || '').value;
}

function isLoggedIn(req, expectedSecret) {
	if (!req || !req.cookies) {
		return false;
	}
	var actualSecret = req.cookies.sessionsecret;
	return !!actualSecret && actualSecret === expectedSecret;
}

exports.readLogFile = readLogFile;
exports.formatLogMessage = formatLogMessage;
exports.statusMessage = statusMessage;
exports.safeCycles = safeCycles;
exports.generateHeaders = generateHeaders;
exports.getSafeReqId = getSafeReqId;
exports.getRequestLogPath = getRequestLogPath;
exports.formatBody = formatBody;
exports.unauthorized = unauthorized;
exports.highlight = highlighter;
exports.isLoggedIn = isLoggedIn;

/**
 * This code is closed source and Confidential and Proprietary to
 * Appcelerator, Inc. All Rights Reserved.  This code MUST not be
 * modified, copied or otherwise redistributed without express
 * written permission of Appcelerator. This file is licensed as
 * part of the Appcelerator Platform and governed under the terms
 * of the Appcelerator license agreement.
 */
var fs = require('fs'),
	path = require('path'),
	moment = require('moment'),
	numeral = require('numeral'),
	async = require('async'),
	Logger = require('appc-logger'),
	util = require('./util');

// jscs:disable jsDoc

function configure(app, prefix, arrow, devmode) {
	var logdir = Logger.arrowCloudLogDir || path.join(arrow.config.dir || process.cwd(), 'logs');
	app.delete(prefix + '/metadata/logs', function serveLogAPI(req, res, next) {
		fs.readdir(logdir, function (err, logs) {
			if (err) { return next(err); }
			async.eachLimit(logs, 100, function (log, cb) {
					if (log === 'requests.log') {
						fs.writeFile(path.join(logdir, log), '', cb);
					} else if (log.indexOf('request-') === 0) {
						fs.unlink(path.join(logdir, log), cb);
					} else {
						cb();
					}
				},
				function (err) {
					if (err) {
						return next(err);
					} else {
						return res.json(true);
					}
				});
		});
	});
	app.get(prefix + '/metadata/logs', function serveLogAPI(req, res, next) {
		var lines = [],
			done = function (err) {
				if (err) { return next(err); }
				res.json(lines);
			},
			readLog = function (reqlog, next) {
				util.readLogFile(reqlog, function (obj) {
					var fn = path.join(logdir, 'request-' + obj.req_id + '.log.metadata');
					if (!fs.existsSync(fn)) { return; }
					lines.unshift([
						obj.req_id,
						obj.res.statusCode,
						obj.req.method,
						obj.req.url,
						obj.time,
						moment(obj.time).format('MMM D, YYYY h:mm A'),
						numeral(obj.duration || obj.response_time).format('0.0')
					]);
				}, next);
			};

		if (arrow.config.logging && arrow.config.logging.requestsLogFilename) {
			async.each(fs.readdirSync(logdir), function (log, cb) {
				if (log.indexOf('request-cluster-') === 0) {
					readLog(path.join(logdir, log), cb);
				} else {
					cb();
				}
			}, function (err) {
				!err && lines.sort(function (a, b) {
					return a.time > b.time;
				});
				done(err);
			});
		} else {
			var log = path.join(logdir, 'requests.log');
			readLog(log, done);
		}
	});
}

exports.configure = configure;

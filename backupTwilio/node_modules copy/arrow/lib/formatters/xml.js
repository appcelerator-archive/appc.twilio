/**
 * This code is closed source and Confidential and Proprietary to
 * Appcelerator, Inc. All Rights Reserved.  This code MUST not be
 * modified, copied or otherwise redistributed without express
 * written permission of Appcelerator. This file is licensed as
 * part of the Appcelerator Platform and governed under the terms
 * of the Appcelerator license agreement.
 */

/**
 * Formats the body using XML.
 * @param req
 * @param resp
 * @param body
 * @param singular
 * @param plural
 * @param callback
 */
exports.format = function xmlFormatter(req, resp, body, singular, plural, callback) {
	resp && resp.set('Content-Type', 'application/xml');
	var xml = require('xml');
	body = body[plural] || body[singular] || body;
	body = JSON.parse(JSON.stringify(body));
	var key,
		root = {};
	if (body && typeof body === 'object' && body !== null) {
		if (Array.isArray(body)) {
			root[plural] = [];
			body.forEach(function (row) {
				var obj = {};
				var array = [];
				obj[singular] = array;
				if (row && typeof row === 'object' && row !== null && !Array.isArray(row)) {
					Object.keys(row).forEach(function (key) {
						var object = {};
						object[key] = row[key] !== undefined ? row[key] : '';
						array.push(object);
					});
				} else {
					array.push(row);
				}
				root[plural].push(obj);
			});
			body = root;
			key = plural;
		} else {
			var obj = {};
			var array = [];
			obj[singular] = array;
			Object.keys(body).forEach(function (key) {
				var object = {};
				object[key] = body[key] !== undefined ? body[key] : '';
				array.push(object);
			});
			body = obj;
			key = singular;
		}
	} else { // it's a basic value
		key = singular;
		root[key] = [body];
		body = root;
	}
	// add in our request attributes
	body[key].unshift({
		_attr: {
			'request-id': req && req.getId(),
			'success': true
		}
	});
	resp && resp.set('Content-Type', 'application/xml');
	body = xml(body, {declaration: true, indent: '\t'});
	callback(null, body);
};

exports.defaultMimeType = 'application/xml';

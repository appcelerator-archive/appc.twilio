/**
 * This code is closed source and Confidential and Proprietary to
 * Appcelerator, Inc. All Rights Reserved.  This code MUST not be
 * modified, copied or otherwise redistributed without express
 * written permission of Appcelerator. This file is licensed as
 * part of the Appcelerator Platform and governed under the terms
 * of the Appcelerator license agreement.
 */
var format = require('util').format,
	fs = require('fs');

// jscs:disable jsDoc

module.exports = {
	name: 'Arrow Component',
	type: 'arrow_component_generator',
	execute: generate,
	order: 1
};

// opts will contain answers to all field questions
function generate(appc, args, opts, callback) {
	var _ = appc.lodash,
		async = appc.async,
		inquirer = appc.inquirer;

	var fields = [],
		plugins,
		plugin;

	// set the log level for the plugin
	appc.log.level(opts.logLevel || 'info');

	async.series([

		// get a list of plugins that subscribe to arrow generation
		function (cb) {
			appc.core.loadPlugins(appc.commander, 'arrow_generate',
				opts.pluginPaths, function (err, _plugins) {
					if (err) { return cb(err); }
					plugins = _plugins;
					return cb();
				});
		},

		function (cb) {
			if (!Array.isArray(plugins) || !plugins.length) {
				return cb(new Error(appc.constants.ERR_NO_PLUGINS));
			}

			inquirer.prompt([
				{
					type: 'list',
					name: 'plugin',
					when: function () {
						return !opts.plugin;
					},
					message: 'What Arrow component would you like to generate?',
					choices: _.map(plugins, function (plugin) {
						return {name: plugin.name, value: plugin};
					})
				}
			], function (err, answers) {
				if (arguments.length === 1) {
					answers = err;
					err = null;
				}
				appc.log.trace(answers);
				plugin = answers && answers.plugin || opts.plugin;
				cb(err);
			});
		},

		// TODO: pull this whole step into appc-cli-core and make it
		//       a one-liner
		// ask any questions associated with those plugins
		function (cb) {
			var fields = plugin.fields;

			// make sure fields are unique and not in opts
			var tmpOpts = {};
			fields = _.reject(fields, function (field) {
				if (tmpOpts[field.name]) {
					return true;
				} else {
					tmpOpts[field.name] = true;
				}
				return opts[field.name] != null;
			});

			// prompt for missing fields, if necessary
			if (fields.length) {
				inquirer.prompt(fields, function (err, answers) {
					if (arguments.length === 1) {
						answers = err;
						err = null;
					}
					opts = _.extend(opts, answers);
					return cb(err);
				});
			} else {
				return cb();
			}
		},

		// execute an appc install, to be sure deps are in place
		function (cb) {
			if (fs.existsSync('package.json') && fs.existsSync('appc.json')) {
				appc.core.loadPlugins(appc.commander, 'install', opts.pluginPaths, function (err, _plugins) {
					if (err) { return cb(err); }
					return appc.commands.install(_plugins, [], {}, cb);
				});
			} else {
				return cb();
			}
		},

		// execute applicable plugin
		function (cb) {
			plugin.execute(appc, opts, cb);
		}

	], callback);

}

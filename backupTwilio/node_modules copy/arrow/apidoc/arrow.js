/**
 * @class Arrow
 * The top-level module for managing Arrow Builder projects.
 *
 * An Arrow Builder project is a Node.js server application that runs in the Arrow Cloud.
 * To create a server, load the Arrow module, then use the Arrow constructor to create an
 * Arrow instance and invoke its {@link #start start() method}.
 *
 *     var Arrow = require('arrow'),
 *         server = new Arrow();
 *
 *     // Add event listeners or invoke APIs on the Arrow instance
 * 	   var myModel = Arrow.createModel('foo', {...});
 *     server.addModel(myModel);
 *
 *     server.on('starting', function () {
 * 	       server.logger.trace('Starting server...');
 *     });
 *
 *     server.start();
 *
 * ### Components
 *
 * An Arrow Builder application is comprised of several components. You can either define the
 * components using JavaScript files placed in specific directories, which are automatically loaded
 * when creating an Arrow instance, or programmatically create components after initializing an Arrow instance.
 *
 * For information about the project structure of Arrow applications, see
 * [Arrow Builder guides](http://docs.appcelerator.com/platform/latest/#!/guide/Arrow_Builder).
 *
 * #### Express and Third-Party Middleware
 *
 * Arrow uses Express for its web framework. By default, Arrow creates an Express app instance
 * when creating an Arrow instance, then binds its API endpoints to the app instance.
 * You can access the Express app instance using the `app` property of the Arrow instance,
 * then invoke [Express API calls](http://expressjs.com/4x/api.html) on the app instance.
 *
 *     server.app.all('/api/*', function (req, res, next) {
 * 	       req.server.logger.info('Intercepted the request!');
 * 	       next();
 *     });
 *
 * Do not pass the error code to the response object's `send()` method. Use the `status()` method
 * instead. If you pass a number value to the `send()` method, an error will be thrown.
 *
 *     // Throws an error
 *     res.send(500);
 *
 *     // Invoke the following methods instead.
 *     res.status(500).send('Uh oh. Something bad happened.');
 *
 * Arrow also loads the body-parser, cookie-parser and busboy modules to provide additional
 * parsing capabilities as well as the compression module.
 *
 * For Express template engines, Arrow uses ejs, handlebars, marked and react modules.
 * Access the template engines using the {@link Arrow.Middleware} API.
 *
 * #### Connectors
 *
 * {@link Arrow.Connector Connectors} allow an Arrow Builder application to access data stored
 * in an external source.  Connectors are structured like Arrow Builder projects where they have
 * their own models, dependencies and configuration files.
 *
 * You can either use an existing connector or create your own connector.
 *
 * #### Models
 *
 * {@link Arrow.Model Models} provide an interface for the Arrow Builder application to access
 * data.  By default, the application will generate standardized endpoints for a client to access
 * the data from the Arrow application.
 *
 * #### APIs
 *
 * {@link Arrow.API APIs} provide a way for a client to access your application, execute custom
 * logic and internally access the application's models, then return data back to the
 * client application.
 *
 * Create an API to execute a custom operation with model data.
 *
 * #### Blocks
 *
 * {@link Arrow.Block Blocks}  are functions that run before or after an API endpoint is executed.
 * They can be used to modify the API request, to modify the API response or to execute common
 * tasks like audit logging, caching, rate limiting or recording analytics. Multiple blocks can
 * be executed before or after an API request. Blocks are optional.
 *
 * #### Webs
 *
 * Webs are endpoints that render HTML to the client application.
 * Webs are comprised of routes, renderers, templates and static assets.
 *
 * {@link Arrow.Router Routes} provide the endpoint to access the Web and logic to access the data.
 *
 * {@link ArrowRendererEngine Renderers} (or template engines) apply local data to your templates
 * to generate HTML. To access a renderer or create your own renderer, use the {@link Arrow.Middleware} API.
 *
 * Templates are the files you want to render.  Place all templates in the `./web/views` folder
 * with an appropriate extension--either `ejs`, `hbs`, `html`, `jsx`, `md` or a custom one that
 * you can define.  Arrow selects the renderer engine based on the file extension.
 *
 * Place all assets, such as images, style sheets, static HTML files, etc., in the `./web/public`
 * folder.
 *
 * #### Logger
 *
 * The {@link Arrow.Logger} provides a wrapper for [bunyan](https://www.npmjs.com/package/bunyan),
 * a JSON logging utility.  By default, Arrow creates a logger instance, which can be accessed
 * using the `logger` property of the Arrow instance.
 *
 *     server.logger.trace('breadcrumbs...');
 *     server.logger.info('%s %s', key, value);
 *     server.logger.error(err);
 *
 * ### Lifecycle
 *
 * The following sections describe the sequence of events that occur when initializing and starting
 * an Arrow instance, then making requests to the server.
 *
 * #### Initialization Sequence
 *
 * When creating a new Arrow instance, the following events occur:
 *
 * 1. Loads the configuration files.
 * 2. Creates an Express app instance unless you pass `loadOnly` as `true` in the constructor.
 * 3. Creates the Admin Console unless its disabled.
 * 4. Creates a Logger instance.
 * 5. Registers the connectors.
 * 6. Loads the model and block files.
 * 7. Loads API and Web files and binds the endpoints to the Express app instance.
 * 8. Fires the `loaded` event.
 *
 * At this point, you may add event listeners or programmatically add any other Arrow components.
 *
 * #### Startup Sequence
 *
 * After invoking the `start()` method on the Arrow instance:
 *
 * 1. Fires the `starting` event.
 * 2. Registers and binds the model's standardized API endpoints to the Express app instance.
 * 3. Fires the `listening` event.
 * 4. Binds the server to a port.
 * 5. Fires the `listen` event.
 * 6. Fires the `started` event.
 *
 * The client can now make requests to the server.
 *
 * #### Request Sequence
 *
 * When a client makes a request to the Arrow application, Arrow first authenticates the request,
 * then proceeds by making a series of middleware calls, where the `next()` function needs to be
 * called after completing each operation.
 *
 * 1. Authenticate the request. If you are using a custom security plugin, calls the `matchURL()`
 *    and `validateRequest()` methods if defined.
 * 2. For Models, calls the Connector's `startRequest()`, `loginRequired()` and `login()` methods
 *    if defined.
 * 3. Calls any defined pre-Blocks.
 * 4. Calls the API, Model or Router logic.
 * 5. Calls any defined post-Blocks.
 * 6. For Models, calls the Connector's `endRequest()` method if defined.
 * 7. Fires the `after` event.
 *
 * ### Arrow Middleware Calls
 *
 * Each Arrow middleware call (`action` or `execute` property) is passed the same three objects:
 *
 *  * [Express Request object](http://expressjs.com/4x/api.html#req)
 *  * [Express Response object](http://expressjs.com/4x/api.html#res)
 *  * Middleware function to call next.  Always call the `next()` function to execute the next
 *    middleware call in the sequence.
 *
 * In addition to the Express APIs, the request object is also passed a reference to the Arrow
 * instance as the `server` property. Use the instance to invoke Arrow APIs, such as accessing
 * model data or invoking an API endpoint.  Both the request and response objects are passed a
 * reference to the Logger instance as the `logger` property to log messages.
 *
 * For Arrow.API instances, the request and response objects are also passed the `model`
 * and `responseModel` properties, which references the models passed to the API constructor.
 */

/**
 * @constructor
 * Loads the configuration files in the `./conf` folder and initializes an Arrow instance.
 * @param {Object} [config] Additional configuration parameters, which are merged with the configuration files.
 * @param {Boolean} [loadOnly] Set to `true` to only load the Arrow components.
 * Does not create the Express app instance or starts the admin console.
 */

/**
 * @event after
 * Fired after a request completes. The callback will be passed the request and response objects.
 */
/**
 * @event error
 * Fired if an error occurred when setting up the server. The callback will be passed the error object.
 */
/**
 * @event listening
 * Fired before binding the server to a port.
 */
/**
 * @event listen
 * Fired when the server can accept connections.
 */
/**
 * @event loaded
 * Fired after initializing the Arrow instance.
 */
/**
 * @event reloaded
 * Fired after reloading an Arrow component.
 */
/**
 * @event starting
 * Fired when the `start()` method is invoked.
 */
/**
 * @event started
 * Fired when the `start()` method completes.
 */
/**
 * @event stopping
 * Fired when the `stop()` method is invoked.
 */
/**
 * @event stopped
 * Fired when the `stop()` method completes.
 */

/**
 * @method addListener
 * Binds a callback to an event.
 * @static
 * @param {String} name Event name
 * @param {Function} cb Callback function to execute.
 */
/**
 * @method on
 * @alias #static-method-addListener
 * @static
 */
/**
 * @method once
 * Binds an one-time listener to an event.
 * @static
 * @param {String} name Event name
 * @param {Function} cb Callback function to execute.
 */
/**
 * @method removeListener
 * Unbinds a callback from an event.
 * @static
 * @param {String} name Event name
 * @param {Function} cb Callback function to remove.
 */
/**
 * @method removeAllListeners
 * Unbinds all event callbacks for the specified event.
 * @static
 * @param {String} [name] Event name.  If omitted, unbinds all event listeners.
 */


/**
 * @property {Array<Arrow.API>} apis
 * APIs loaded and added to the instance.
 */
/**
 * @property {Object} app
 * Express app instance.
 */
/**
 * @property {Array<Arrow.Block>} blocks
 * Blocks loaded or added to the instance.
 */
/**
 * @property {Object} config
 * Configuration object used to initialize the server instance.
 */
/**
 * @property {Object} express
 * Express module instance.
 * @since 1.1.0
 */
/**
 * @property {Boolean} ignoreDuplicateModels
 * Set to `true` to ignore duplicate models.
 */
/**
 * @property {Boolean} inProduction
 * Set to `true` if the application was deployed to the production environment.
 */
/**
 * @property {Arrow.Logger} logger
 * Logger instance.
 */
/**
 * @property {Arrow.Middleware} middleware
 * Middleware instance.
 */
/**
 * @property {Array<Arrow.Model>} models
 * Models loaded or added to the instance.
 */
/**
 * @property {Number} port
 * Port number used by the server instance.
 */
/**
 * @property {Array<Arrow.Router>} routes
 * Routes loaded to the instance.
 */

/**
 * @class Arrow.API
 * An Arrow API provides a way for a client to access your application, execute custom logic and
 * internally access the application's models and APIs, then return data back to the client application.
 * Use an API to perform a custom operation on model data that is not exposed as one of the
 * standardized methods.
 *
 * ### Create an API Endpoint
 *
 * To create an Arrow API, define a new API instance with the API constructor,
 * then add the instance to the server instance and bind the API instance to the
 * Arrow server's app instance.
 *
 * Pass an implementation object, Arrow configuration object and Arrow instance to the constructor.
 * Set any API properties on the implementation object (except the ones marked non-creation),
 * but the following properties are required to be set: {@link #action}, {@link #description},
 * {@link #group} and {@link #path}.
 *
 * After creating the API instance, add the API instance to the Arrow instance by calling the Arrow
 * instance's {@link Arrow#addAPI addAPI()} method, then call the API instance's [bind()](#bind) method
 * and pass it an app instance.
 *
 *      var Arrow = require('arrow');
 *      var server = new Arrow();
 *      // since the API relies on a model,
 *      // need to wait for the model to be loaded before creating the API
 *      server.on('starting', function() {
 *          var fooAPI = new Arrow.API({
 *              group: 'foo',
 *              path: '/api/foo/',
 *              method: 'GET',
 *              description: 'Get all the Foo objects',
 *              model: 'foo',
 *              action: function(request, response, next) {
 *                  request.model.findAll(function(err, results) {
 *                      if (err) {
 *                          next(err);
 *                      } else {
 *                          next(null, results);
 *                      }
 *                  });
 *              }
 *          }, server.config, server);
 *          server.add(fooAPI);
 *          fooAPI.bind(server.app);
 *      }
 *      server.start();
 *
 * Alternatively, you can create an API definition file that is automatically loaded by the Arrow project.
 * For details, see the [Arrow APIs guide](http://docs.appcelerator.com/platform/latest/#!/guide/Arrow_APIs).
 *
 * ### Invoke an API Endpoint
 *
 * To invoke an API endpoint within the application, use the Arrow instance's [getAPI()](Arrow#getAPI) method.
 * An API is identified by its path and method (HTTP verb), or its nickname if you defined one when
 * creating the API.  After retrieving the API instance, call its [execute()](#execute) method.
 *
 *     server.getAPI('foo', 'GET').execute({}, function (err, results) {
 * 	       if (err) {
 * 	           server.logger.error(err);
 *         } else {
 * 	           // do something with results
 *         }
 *     });
 */

/**
 * @constructor
 * Creates a new API instance.
 * @param {Dictionary<Arrow.API>} impl Implementation object.
 * Set any API properties on the object except the ones marked non-creation. The following
 * properties must be set: {@link #action}, {@link #description}, {@link #group} and {@link #path}.
 * @param {Object} config Arrow configuration object.
 * @param {Arrow} arrow Arrow instance.
 */

/**
 * @property {Function} action
 * Logic to execute when the endpoint is invoked by the client application.
 * The function is passed a request object, response object and next() function.
 * You should always make sure that the action function calls the next() function
 * regardless if the result is a success or an error.
 */
/**
 * @property {String/Array<String>} after
 * One or more Arrow Blocks to be executed after the request. Blocks are referenced by their
 * name property. If you want to execute multiple blocks, you should specify them as an
 * array of block names. If multiple blocks are specified, they are executed in the order specified.
 * Specify either `after` or `post` but not both.
 */
/**
 * @property {Object} app
 * @nonCreation
 * Express app instance.
 */
/**
 * @property {String/Array<String>} before
 * One or more Arrow Blocks to be executed before the request. Blocks are referenced by their
 * name property. If you want to execute multiple blocks, you should specify them as an
 * array of block names. If multiple blocks are specified, they are executed in the order specified.
 * Specify either `before` or `pre` but not both.
 */
/**
 * @property {Object} config
 * @nonCreation
 * Configuration object used to initialize the API instance.
 */
/**
 * @property {Function} constructor
 * Custom constructor to execute custom initialization logic.  The new API instance is passed to
 * `this` in the function.
 */
/**
 * @property {String} description
 * Human-readable description of the API, which is used by the generated API documentation.
 */
/**
 * @property {String} filename
 * @nonCreation
 * File used to load the API instance.
 */
/**
 * @property {String} group
 * Logical name for the API grouping.
 */
/**
 * @property {String} method
 * HTTP verb: `GET`, `PUT`, `POST` or `DELETE`.
 */
/*
 * @property {Function} middleware
 * @nonCreation
 * Middleware block that provides access to the API's action implementation.
 */
/**
 * @property {Arrow.Model} model
 * The model to use for the request. Passed as the `model` property in the `request` and `response`
 * objects of the {@link #action} function.
 */
/**
 * @property {String} nickname
 * Alternative identifier for the API.  By default, the API is identified by its path and HTTP verb.
 * If you do not specify a nickname, this property will be set to the path.
 */
/**
 * @property {Object} parameters
 * Input parameters required to execute the API endpoint. This is an object of key-value pairs,
 * where the key is the name of the parameter and the value is an object with the following properties:
 *
 * * optional (Boolean): Determines if the parameter is optional (`true`) or required (`false`).
 * * type (String): the type of input parameter: `path` or `query`.
 * * description (String): used for generating API documentation.
 */
/**
 * @property {String} path
 * API endpoint.
 */
/**
 * @property {String} plural
 * A string used as the property name when your API endpoint returns an array.
 * By default, the plural value is the plural of the model name.
 * For example, if your model is named car, the default plural would be cars.
 */
/**
 * @property post
 * @alias #after
 */
/**
 * @property pre
 * @alias #before
 */
/**
 * @property {Arrow.Model} response
 * The model to use for the response. Only use the property if your request and response models are
 * different. Passed as the `modelResponse` property in the `request` and `response`
 * objects of the {@link #action} function.
 */
/**
 * @property {Object} route
 * @nonCreation
 * Express route instance that binds the endpoint to the logic.
 */
/**
 * @property {String} singular
 * A string used as the property name when your API endpoint returns a single record.
 * By default, the singular value is the name of the model.
 */
/**
 * @property {String} timestamp
 * @nonCreation
 * Datetime when the route was last synced.
 */
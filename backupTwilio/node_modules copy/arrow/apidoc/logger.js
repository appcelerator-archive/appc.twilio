/**
 * @class Arrow.Logger
 * The Arrow Logger class provides a wrapper for [bunyan](https://www.npmjs.com/package/bunyan),
 * a JSON logging utility.  You can access a local instance of the log utility using the `logger`
 * property of the Arrow instance.
 */

/**
 * @method createLogger
 * Creates a log utility instance.
 * @static
 * @param {Object} options Additional initialization options.
 * Refer to the [bunyan documentation](https://www.npmjs.com/package/bunyan).
 * @return {Arrow.Logger}
 */
/**
 * @method createDefaultLogger
 * @alias #static-method-createLogger
 * @static
 */
/**
 * @method createRestifyLogger
 * Creates a restify version of the log utility.
 * @static
 * @param {Arrow} server Arrow server instance.
 * @param {Object} options Additional initialization options.
 * Refer to the [bunyan documentation](https://www.npmjs.com/package/bunyan).
 * @return {Arrow.Logger}
 */
/**
 * @method debug
 * Logs a message with a debug-level severity.
 * @param {...Object} [params] String, formatted-string with variables, object or Error object.
 * @return {Boolean/void} If no arguments are passed, returns a boolean indicating if the debug
 * level is enabled.
 */
/**
 * @method error
 * Logs a message with an error-level severity.
 * @param {...Object} [params] String, formatted-string with variables, object or Error object.
 * @return {Boolean/void} If no arguments are passed, returns a boolean indicating if the error
 * level is enabled.
 */
/**
 * @method fatal
 * Logs a message with a fatal-level severity.
 * @param {...Object} [params] String, formatted-string with variables, object or Error object.
 * @return {Boolean/void} If no arguments are passed, returns a boolean indicating if the fatal
 * level is enabled.
 */
/**
 * @method info
 * Logs a message with an info-level severity.
 * @param {...Object} [params] String, formatted-string with variables, object or Error object.
 * @return {Boolean/void} If no arguments are passed, returns a boolean indicating if the info
 * level is enabled.
 */
/**
 * @method level
 * Sets or retrieves the log level.
 * @param {Number/String} [level] Level to set.
 */
/**
 * @method levels
 * Sets or retrieves the log level for a specific stream.
 * @param {Number/String} [stream] Stream to set or retrieve the log level for.
 * @param {Number/String} [level] Level to set.
 * @return {Array<Number>/Number/void} If no arguments are passed, retrieves an array of available
 * log levels. If the stream is passed, retrieves the current log level of the stream.
 */
/**
 * @method stripColors
 * Removes ANSI color codes from the string
 * @param {String} string
 * @return {String}
 */
/**
 * @method trace
 * Logs a message with a trace-level severity.
 * @param {...Object} [params] String, formatted-string with variables, object or Error object.
 * @return {Boolean/void} If no arguments are passed, returns a boolean indicating if the trace
 * level is enabled.
 */
/**
 * @method warn
 * Logs a message with a warn-level severity.
 * @param {...Object} [params] String, formatted-string with variables, object or Error object.
 * @return {Boolean/void} If no arguments are passed, returns a boolean indicating if the warn
 * level is enabled.
 */

/**
 * @property {Number} DEBUG
 * Constant indicating the debug level
 * @static
 */
/**
 * @property {Number} ERROR
 * Constant indicating the error level
 * @static
 */
/**
 * @property {Number} FATAL
 * Constant indicating the fatal level
 * @static
 */
/**
 * @property {Number} INFO
 * Constant indicating the info level
 * @static
 */
/**
 * @property {Number} TRACE
 * Constant indicating the trace level
 * @static
 */
/**
 * @property {Number} WARN
 * Constant indicating the warn level
 * @static
 */
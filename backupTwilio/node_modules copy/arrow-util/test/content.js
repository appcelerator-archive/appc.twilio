// jscs:disable jsDoc

var fs = require('fs'),
	path = require('path'),
	content = require('../').content,
	should = require('should');

describe('#content', function () {

	it('should generate basic doc', function () {
		var result = content.generate('a');
		should(result).be.an.object;
		should(result.languages).be.empty;
		result.markup.should.be.equal('<p>a</p>\n');
	});

	it('should generate h1', function () {
		var result = content.generate('# a');
		should(result).be.an.object;
		should(result.languages).be.empty;
		result.markup.should.be.equal('<h1 id="heading-a"><a name="heading-a">a</a></h1>');
	});

	it('should generate h2', function () {
		var result = content.generate('## a');
		should(result).be.an.object;
		should(result.languages).be.empty;
		result.markup.should.be.equal('<h2 id="heading-a"><a name="heading-a">a</a></h2>');
	});

	it('should generate using tokens', function () {
		var result = content.generate('## $b', {'b': 'a'});
		should(result).be.an.object;
		should(result.languages).be.empty;
		result.markup.should.be.equal('<h2 id="heading-a"><a name="heading-a">a</a></h2>');
	});

	it('should generate missing tokens', function () {
		var result = content.generate('## $b', {'a': 'b'});
		should(result).be.an.object;
		should(result.languages).be.empty;
		result.markup.should.be.equal('<h2 id="heading--b"><a name="heading--b">$b</a></h2>');
	});

	it('should generate basic JS code', function () {
		var result = content.generate('```javascript\nvar a=1;\n```');
		should(result).be.an.object;
		should(result.languages).be.empty;
		result.markup.should.be.equal('<pre class=\"highlight javascript\"><span class=\"hljs-keyword\">var</span> a=<span class=\"hljs-number\">1</span>;</pre>');
	});

	it('should generate basic curl code', function () {
		var result = content.generate('```curl\ncurl foo```');
		should(result).be.an.object;
		should(result.languages).not.be.empty;
		should(result.languages).containEql('curl');
		result.markup.should.be.equal('<pre class="highlight curl">curl foo</pre>');
	});

	it('should generate basic bash code', function () {
		var result = content.generate('```bash\nconsole.log("a");\n```');
		should(result).be.an.object;
		should(result.languages).not.be.empty;
		should(result.languages).containEql('bash');
		result.markup.should.be.equal('<pre class="highlight bash">console.log(<span class="hljs-string">"a"</span>);</pre>');
	});

	it('should support EJS', function () {
		var result = content.generate('<%=a%>', {a: 'b'});
		should(result).be.an.object;
		should(result.languages).be.empty;
		result.markup.should.be.equal('<p>b</p>\n');
	});

	it('should make anchor with no dashes', function () {
		var result = content.makeAnchor('a');
		result.should.be.equal('a');
	});

	it('should make anchor with dashes', function () {
		var result = content.makeAnchor('a b');
		result.should.be.equal('a-b');
	});

	it('should skip ejs', function () {
		var result = content.generate('<%=a%>', {}, {ejs: false});
		result.should.be.an.object;
		result.markup.should.be.equal('<p><%=a%></p>\n');
	});

	it('should cleanup empty <p>', function () {
		var md = '# Introduction\n' +
			'\n' +
			'	**API Endpoint**\n' +
			'\n' +
			'	*$ENDPOINT_URL*\n' +
			'\n' +
			'\n' +
			'This API is organized around';
		var result = content.generate(md);
		result.should.be.an.object;
		result.markup.should.be.equal(fs.readFileSync('test/results/cleanupEmpty.html', 'UTF-8'));
	});

	it('should support html', function () {
		var result = content.generate('<blockquote>Foo</blockquote>');
		result.should.be.an.object;
		result.markup.should.be.equal('<blockquote>Foo</blockquote>');
	});

	it('should skip markdown', function () {
		var result = content.generate('#foo', {}, {markdown: false});
		result.should.be.an.object;
		result.markup.should.be.equal('#foo');
	});

	it('should generate full code block', function () {
		var md = fs.readFileSync(path.join(__dirname, './fixtures/api.md')).toString();
		var result = content.generate(md);
		result.should.be.an.object;
		result.markup.should.be.equal(fs.readFileSync('test/results/fullCodeBlock.html', 'UTF-8'));
	});

	it('should not hang with certain underscore permutations', function () {
		var md = fs.readFileSync(path.join(__dirname, './fixtures/hang.md')).toString();
		var result = content.generate(md);
		result.should.be.an.object;
		result.markup.should.be.equal(fs.readFileSync('test/results/underscorePermutations.html', 'UTF-8'));
	});

	it('should not hang escape image tag', function () {
		var md = '<div><img src=\'foo_bar.png\'></div>';
		var result = content.generate(md);
		result.should.be.an.object;
		result.markup.should.be.equal('<div><img src=\'foo_bar.png\'></div>');
	});

	it('should generate code and table', function () {
		var om = {metadata: {name: 'foo', description: 'bar'}};
		var md = fs.readFileSync(path.join(__dirname, './fixtures/code_table.md')).toString();
		var result = content.generate(md, {objectmodel: om});
		result.should.be.an.object;
		result.markup.should.be.equal(fs.readFileSync('test/results/generateCodeAndTable.html', 'UTF-8'));
	});
});
